//GongSunink 2022

//TestMode conf
const int testModePlayer = 1;
playergroup testModePlayerGroup = PlayerGroupSingle(testModePlayer);
const fixed damageDisplayerReflash = 7.0;
bool showGameTime = true;
bool showLogLevel;

//WARNING!!----DO NOT CHANGE CODE BELOW THIS LINE IF IT IS NOT NECESSARY----CAUTION!!
bool initialSelect;
bool summoning;
bool loggerVisablityFlag;
string upgradeInfoPrefix = "playerupgraderecoder-upgradeinfo";
int[10] playerTalentSelected;

const int LOGGER_VERBOSE = 0;
const int LOGGER_INFO = 1;
const int LOGGER_DEBUG = 2;
const int LOGGER_WARN = 3;
const int LOGGER_ERROR = 4;
const int loggerMessageMAX = 400;
const int loggerMessageMAXlength = 65;

string[4] loggerLevelColor;
string[4] loggerLevelName;

//TestingUI
const int TEST_UI_PADDING = 10;
text EMP_TEXT = StringToText("");

struct defaultConstances{
    string DEFAULT_TITLE;
    string DEFAULT_TOOLTIP;
    string DEFAULT_IMG;
    string DEFAULT_BORDERDDS;
    string DEFAULT_BTNIMG;
    string DEFAULT_BTNHOVERIMG;
    playergroup DEFAULT_PLAYERGROUP;
    string DEFAULT_FONTSTYLE;
};
struct moonStyleBtn{
    int border;
    int img;
    int btn;
    int textLabel;
};
typedef moonStyleBtn mBtn;
struct SmainMenu{
    int self;
    mBtn heroSelectBtn;
    mBtn summonAllyHeroBtn;
    mBtn summonEnemyHeroBtn;
    mBtn upgradeHeroBtn;
    mBtn noCoolDownBtn;
    mBtn fullmana;
    mBtn removeHeroBtn;
    mBtn visionAreaSetting;
    mBtn nextRound;
    mBtn lastRound;
    mBtn summonDummy;
    mBtn summonShieldObj;
};

struct Slogger{
    int self;
    int listBoxControl;
    int contolBtn;
};

struct Dialog{
    SmainMenu mainMenu;
    Slogger logger;
};
//所有dialog的管理者对象
Dialog Dialogs;
defaultConstances DEFAULTS;

//GameTools
int getPlayerHeroId(int playerId);
unit getPlayerHeroUnit(int playerId);
void setTestPlayerCurrentSelectedUnit(unit inUnit);
unit getTestPlayerCurrentSelectedUnit();
int getHeroLastSelected();
void setHeroLastSelected(int heroId);
int getPlayerLastPicked();
void setPlayerLastPicked(int player);
unit getDummySelected();
void setDummySelected(unit dummy);
void gameSoundPlayer(int type);
int getHeroIdByUnit(unit inUnit);
void debug(string message);
string damageDisplayerKey(string unittag, int suffix);

//GameUIControl
const int c_UIType_heroSelect = 1;
const int c_UIType_talentSelect = 2;
const int c_UIType_additionalSkillSelect = 3;
const int c_UIType_SKillSelect = 4;
const int c_UIType_additionalPropSelect = 5;

const int v_additionalSelect = 1;
const int v_heroSelect = 2;
const int v_roundInit = 3;

const int PROGRESS_TYPE_LIFE = 1;
const int PROGRESS_TYPE_ENERGY = 2;
const int PROGRESS_TYPE_SHIELD = 3;

const int c_PropType_ad = 1;
const int c_PropType_ap = 2;
const int c_PropType_antiAd = 3;
const int c_PropType_antiAp = 4;
const int c_PropType_hp = 5;
const int c_PropType_hpRegen = 6;
const int c_PropType_mana = 7;
const int c_PropType_manaRegen = 8;
const int c_PropType_coolDown = 9;
const int c_PropType_crit = 10;
const int c_PropType_speed = 11;
const int c_PropType_atkSpeed = 12;
const int c_PropType_atkRange = 13;

const int c_upgradeBtn_q = 0;
const int c_upgradeBtn_w = 1;
const int c_upgradeBtn_e = 2;
const int c_upgradeBtn_r = 3;

int SELECT_BTN;

void updateHeroPropProgressBar(int player,unit inUnit, int type);
void updateStatusBar(int player,unit inUnit);
void talentSelectUI(int row, int column, bool select, playergroup p);
void talentEnableUI(int row, int column, bool enable, playergroup p);
void upgradeBtnShow(int index,bool show, playergroup p);
void upgradeBtnEnable(int index, bool show,playergroup p);
void updateAbilityPickPanel(int currentRemotingPlayer, playergroup p);
void abilitySelectUI(int row, int column, bool select, playergroup p);
bool isAbilityBtnVisiable(int row, int column, int player);
void additionalAbilitySelectUI(int row, int column, bool select , playergroup p);
bool isAdditionalAbilityBtnVisiable(int row, int column, int player);
void initPropAddUI(int row, int currentRemotingPlayer, playergroup p);
void resetPanels(playergroup p);
void GamePanelShow(int type, bool show, playergroup p);
void loadDummyHud(playergroup p);
void showHideDummyHud(bool show, playergroup p);
void updateTalentDisplay(int currentRemotingPlayer, playergroup p);
void updatePropBtn(int currentRemotingPlayer, playergroup refractTargetPlayerGroup);
void updateFullGameUI(int currentRemotingPlayer, playergroup refractTargetPlayerGroup);

//GameData
void talentSelectData(int row, int column, bool select, int player);
bool isTalentSelected(int row, int column, int player);
void abilitySelectData(int row, int column, int player);
bool isAbilitySelected(int row, int column, int player);
void additionalAbilitySelectData(int row, int column, int player);
bool isAdditionalAbilitySelected(int row, int column, int player);
void initPropAddData(int row, int player);
void storeUpgradeBtn(int player, int index, bool show);
void storeUpgradeBtns(int player);
void restoreUpgradeBtns(int player, playergroup p);
void initDataForPlayer();
void fetchPlayerToCurrentRound(int player);
void nextRoundGlobal();
void removeUnitAndReflashPlayer(int player);

//DamageDisplayer
string damageDisplayerPreFix = "ddp";
string damageDisplayerPreFixForTextTag = "ddp";

//time = timestamp
int c_damageDisplayer_timeLast = 1;
int c_damageDisplayer_timeStart = 2;
int c_damageDisplayer_timeTotal = 3;

int c_damageDisplayer_damageLast = 4;
int c_damageDisplayer_damegetotal = 5;

int c_damagedisplayer_texttagDps = 6;
int c_damagedisplayer_texttagLast = 7;
int c_damagedisplayer_texttagTotal = 8;

//WARNING END