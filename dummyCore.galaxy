//GongSun_ink 2022

//gametick
int timerReflashCooldown = 10;

int heroSummon = 19;

string botHero = "dbHero00";

timer damageTimer = TimerCreate();
timer resetTimer = TimerCreate();
bool timerInit;

int mineralsSpent;

string lastBehaviorAdded;

unit botUnit;

fixed botUnitDamagedTotal;

string[10][100] upgradesPlayerHas;
int[10][100] upgradesPlayerHasLevel;

bool flagEmeny;

bool dummyHudInit();
void onPostInit();

//如果是假人则展示hud,如果是玩家则切换ui--覆盖gt_5E391F04
// bool onUnitClick(bool t, bool r){
//     int ePlayer = EventPlayer();
//     unit ePlayerOldUnit = queryPlayerHeroUnit(ePlayer);
//     int eUnit = EventUnit();
//     unit eUnitOwner = UnitGetOwner(eUnit);
    
//     int i = 0;
//     int mphpLong;

//     //dummyPlayer
//     if (eUnitOwner == 11){
//         showHideDummyHud(true);
//     }else{
//         eUnit = queryPlayerHeroUnit(eUnitOwner);

        

//         UnitSelect(ePlayerOldUnit,ePlayer,false);
//         UnitSelect(eUnit,ePlayer,true);
//     }
// }

int playerPicked;

bool onPanelClickGame(bool t, bool r){
    int eDialogControl = EventDialogControl();
    int rootDialog = DialogControlGetDialog(eDialogControl);

    string currentAbility;
    int i;
    int j;

    if (eDialogControl == Dialogs.main_menu.heroSelectBtn.btn){
        //英雄选择界面
        panelCycle(c_UIType_heroSelect); 
    }
    else if (rootDialog == gv_277B64A1){
        DataTableSetInt(true,"heroId",(EventDialogControl() - gv_749EC876[0][0]) / 3);

        gameSoundPlayer(v_heroSelect);
        libNtve_gf_SetDialogItemImage(Dialogs.main_menu.heroSelectBtn.img,gv_AA1BDB6C[DataTableGetInt(true,"heroId")],defaultPlayerGroup);
        libNtve_gf_SetDialogItemTooltip(Dialogs.main_menu.heroSelectBtn.btn,
            StringExternal(("Button/Tooltip/btn_line_ability_" + gf_45491ABD(DataTableGetInt(true,"heroId")) + "_s")),defaultPlayerGroup);

        panelCycle(c_UIType_heroSelect);
    }
    else if (eDialogControl == Dialogs.main_menu.summonAllyHeroBtn.btn){
        DataTableSetInt(true,"player",autoPickPlayer(true));
        onSummonHeroBtnClick();
        panelCycle(c_UIType_talentSelect);
    }
    else if (eDialogControl == Dialogs.main_menu.summonEnemyHeroBtn.btn){
        DataTableSetInt(true,"player",autoPickPlayer(false));
        onSummonHeroBtnClick();
        panelCycle(c_UIType_talentSelect);
    }
    else if (rootDialog == gv_BB156610.lv_5C8CC8E9[0] ||
        rootDialog == gv_BB156610.lv_5C8CC8E9[1] ||
        rootDialog == gv_BB156610.lv_5C8CC8E9[2] ||
        rootDialog == gv_BB156610.lv_5C8CC8E9[3] ||
        rootDialog == gv_BB156610.lv_5C8CC8E9[4]){
        onTalentSelectPanelClick();
    }
    //技能选择
    else if (rootDialog == gv_BB156610.lv_DC4A4CA5[0] ||
        rootDialog == gv_BB156610.lv_DC4A4CA5[1] ||
        rootDialog == gv_BB156610.lv_DC4A4CA5[2] || 
        rootDialog == gv_BB156610.lv_DC4A4CA5[3] ||
        rootDialog == gv_BB156610.lv_DC4A4CA5[4]){
        onHeroSkillPickPanelClick();
    }
    //选择按钮
    else if (eDialogControl == SELECT_BTN){
        if (DialogIsVisible(gv_BB156610.lv_5C8CC8E9[3], 1)){
            panelCycle(c_UIType_talentSelect);
            panelCycle(c_UIType_SKillSelect);
        }
        else if (DialogIsVisible(gv_BB156610.lv_DC4A4CA5[0], 1)){
            panelCycle(c_UIType_SKillSelect);
            // loadArane();
            playerSummonHero();
            // gf_D78F0E01(12);
            // Wait(5,c_timeReal);
            // DialogSetPosition(gv_9CE94DA6,c_anchorCenter,0,0);
            // DialogSetVisible(gv_9CE94DA6,defaultPlayerGroup,true);
        }
    } 
    //-----------------------------------------------------------------    
    else if (eDialogControl == Dialogs.main_menu.noCoolDownBtn.btn){
        UnitClearCooldowns(gv_71C054E5[1],true);
    }
    else if (eDialogControl == Dialogs.main_menu.upgradeHeroBtn.btn){
        UnitXPSetCurrentLevel(gv_71C054E5[1],null,MinI(UnitXPGetCurrentLevel(gv_71C054E5[1],null) + 1,36));
    }


    return true;
}
//-----------------------------------------------------------------

// void reflashPlayer(int player){
//     int i;
//     int j;

//     for (;i<100;i+=1){
//         if (upgradesPlayerHas[player][i] == ""){
//             break;
//         }
//         libNtve_gf_SetUpgradeLevelForPlayer(player,upgradesPlayerHas[i],0);
//     }

//     UnitXPSetXPForLevel(gv_71C054E5[player],"dbdo_ex",0,0);

//     //玩家等级
//     gv_893C301B[player] = 0;
//     //玩家可用技能点
//     gv_63B35897[1] = 0;

//     for (i = 0; i < 5 ; i+=1){
//         //玩家英雄对应技能等级
//         gv_D0B36B8F[1][(i + 1)] += 1;
//         //玩家英雄技能上次升级对应的玩家英雄等级
//         gv_203166CD[1][(i + 1)] = gv_893C301B[1];
//         //判断英雄技能是否学习过
//         gv_5DDEB9BD[1][i] = 0;
//     }

// }

// bool onUpgradeLevelChanged(bool testConds, bool runActions){
//     int i = 0;

//     for (;i<100;i+=1){
//         if (upgradesPlayerHas[EventPlayer()][i] == EventUpgradeName()){
//             upgradesPlayerHasLevel[i] += EventUpgradeLevelDelta();
//             break;
//         }
//         if (upgradesPlayerHas[EventPlayer()][i] == ""){
//             upgradesPlayerHas[i] = EventUpgradeName();
//             upgradesPlayerHasLevel[i] += EventUpgradeLevelDelta();
//             break;
//         }
//     }

//     return true;
// }

bool onSPEffectUsed(bool t, bool r){
    string eEffect = EventPlayerEffectUsed();

    //克劳
    if (eEffect == "dbhy_19b" || eEffect == "dbhy_19" ){
        showMsg(1,"可出刀");
    }
    
    return true;
}

bool onCommand(bool t,bool r){
    string msg = EventChatMessage(false);
    string cmd = StringWord(msg,1);
    string param = StringWord(msg,2);
    string param2 = StringWord(msg,3);
    string param3 = StringWord(msg,4);

    int i;
    string currentAbility;
    
    if (cmd == "b"){
        UnitBehaviorAddPlayer(gv_71C054E5[1],param,1,1);
        lastBehaviorAdded = param;
    }
    else if (cmd == "bb"){
        if (param == ""){
            UnitBehaviorRemove(gv_71C054E5[1],lastBehaviorAdded,1);
        }
        UnitBehaviorRemove(gv_71C054E5[1],param,1);
    }
    else if(cmd == "u"){
        libNtve_gf_SetUpgradeLevelForPlayer(1,param,StringToInt(param2));
    }
    // else if (cmd == "r"){
    //     reflashPlayer(1);
    // }
    else if (cmd == "lv"){
        UnitXPSetCurrentLevel(gv_71C054E5[1],null,MinI(UnitXPGetCurrentLevel(gv_71C054E5[1],null) + 1,36));
    }
    else if (cmd == "a"){
        if (!flagEmeny){
            libNtve_gf_SetAllianceOneWay(2,1,libNtve_ge_AllianceSetting_Enemy);   
            UnitIssueOrder(botUnit, OrderTargetingUnit(AbilityCommand("attack", 0),gv_71C054E5[1]), c_orderQueueReplace);
            flagEmeny = true;
            return true;
        }
        libNtve_gf_SetAllianceOneWay(2,1,libNtve_ge_AllianceSetting_Ally);   
        UnitIssueOrder(botUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        flagEmeny = false;

    }
    else if (cmd == "r"){
        UnitClearCooldowns(gv_71C054E5[1],true);
    }
    //dummyPropa
    else if (cmd == "dpa"){
        showMsg(1,"正在应用....");
        if (param == "ad"){
            for (i=0;i<StringToInt(param2);i+=1){
                gf_18957680(2,gv_F4E2C4A0[0][0]);
            }
        }
        else if (param == "ap"){
            for(i=0;i<StringToInt(param2);i+=1){
                gf_18957680(2,gv_F4E2C4A0[0][1]);
            }            
        }
        else{
            showMsg(1,"属性名不正确");
            return true;
        }
        showMsg(1,"属性已应用！");
    }


    return true;
}

//------------------------------------------damageDisplayer-----------------------------------------

int textTag;

void tryReflashTimers(){
    if (!timerInit){
        TimerStart(damageTimer,9999,false,c_timeGame);
        TimerStart(resetTimer,5,false,c_timeGame);
        timerInit = true;
    }

    if (TimerGetRemaining(resetTimer) == 0.0){
        TimerRestart(resetTimer);
        TimerRestart(damageTimer);
        botUnitDamagedTotal = 0;
    }else{
        TimerRestart(resetTimer);
    }
}

void damageShow(fixed damageAmount, unit damagingUnit, unit damagedUnit, int damageType){
    string playerHeroNameDamaging = TextToString(UnitTypeGetName(UnitGetType(damagingUnit)));
    string playerHeroNameDamaged = TextToString(UnitTypeGetName(UnitGetType(damagedUnit)));

     //有一个隐藏单位 每次受到伤害都会给那个单位同样打一个伤害 应该是作者的反作弊 这里需要判断一下过滤掉
    if (UnitGetType(damagedUnit) == "dbHero00" || (damagingUnit != queryPlayerHeroUnit(1) || UnitGetOwner(damagingUnit) != 1) || damageAmount == 0){
        return;
    }
    //物理伤害d
    if (damageType == c_unitDamageTypeMelee || damageType == c_unitDamageTypeRanged){
        showMsg(1,"tick:"+FixedToString(MaxF(TimerGetElapsed(damageTimer),1.0),2)+"->伤害为物理伤害,伤害为"+FixedToString(damageAmount,2));
    }
    //法术伤害
    else if(damageType == c_unitDamageTypeSpell){
        showMsg(1,"tick:"+FixedToString(MaxF(TimerGetElapsed(damageTimer),1.0),2)+"->伤害为法术伤害,伤害为"+FixedToString(damageAmount,2));
    }
    //真实伤害
    else if(damageType == c_unitDamageTypeSplash){
        showMsg(1,"tick:"+FixedToString(MaxF(TimerGetElapsed(damageTimer),1.0),2)+"->伤害为真实伤害,伤害为"+FixedToString(damageAmount,2));
    }

    botUnitDamagedTotal += damageAmount;

    TextTagDestroy(textTag);
    textTag = TextTagCreate(StringToText("上一次伤害="+FixedToString(damageAmount,2)+",DPS="+
        FixedToString((botUnitDamagedTotal / MaxF(TimerGetElapsed(damageTimer),1.0)),2)+",总伤害="+
        FixedToString(botUnitDamagedTotal,2)+",时间="+FixedToString(MaxF(TimerGetElapsed(damageTimer),1.0),2)),30, 
            UnitGetPosition(damagedUnit), 1.0, true, true, defaultPlayerGroup);
    TextTagAttachToUnit(TextTagLastCreated(), damagedUnit, 1.125);
}

bool onDamageMelee(bool t, bool r){
    tryReflashTimers();
    damageShow(EventUnitDamageAmount(),EventUnitDamageSourceUnit(),EventUnit(),c_unitDamageTypeMelee);
    return true;
}

bool onDamageRanged(bool t, bool r){
    tryReflashTimers();
    damageShow(EventUnitDamageAmount(),EventUnitDamageSourceUnit(),EventUnit(),c_unitDamageTypeRanged);
    return true;
}

bool onDamageSpell(bool t, bool r){
    tryReflashTimers();
    damageShow(EventUnitDamageAmount(),EventUnitDamageSourceUnit(),EventUnit(),c_unitDamageTypeSpell);
    return true;
}

bool onDamageSplash(bool t, bool r){
    tryReflashTimers();
    damageShow(EventUnitDamageAmount(),EventUnitDamageSourceUnit(),EventUnit(),c_unitDamageTypeSplash);
    return true;
}

bool onPlayerSpendMinerals(bool t, bool r){
    
    if (EventPlayerPropertyChangeInt() > 0){
        mineralsSpent += EventPlayerPropertyChangeInt();
    }

    return true;
}

//-------------------------------------------------------------------------------------

bool onUnitDied(bool t, bool r){
    
    libNtve_gf_ShowHideUnit(EventUnit(),true);
    // Wait(8,c_timeGame);
    // UnitSetPropertyInt(EventUnit(),)
    
    return true;
}

//预初始化--初始panel生成前调用
void onPreInit(){
    
    PlayerModifyPropertyInt(1,c_playerPropMinerals,c_playerPropOperAdd,1000000);
    PlayerModifyPropertyInt(2,c_playerPropMinerals,c_playerPropOperAdd,1000000);

    libNtve_gf_CreateUnitsWithDefaultFacing(1,botHero,0,11,PointFromName("Practice Mode Computer2"));
    botUnit = UnitLastCreated();
    UnitSetPropertyInt(botUnit,c_unitPropLifeMax,10000);
    UnitSetPropertyInt(botUnit,c_unitPropLifeRegen,2000);
    UnitSetPropertyInt(botUnit,c_unitPropLifeArmor,0);
    UnitSetPropertyInt(botUnit,c_unitPropEnergyArmor,0);
    
    UnitIssueOrder(botUnit, Order(AbilityCommand("stop", 0)), c_orderQueueAddToFront);

    //玩家 - heroid
    // gv_131E8983[2] = 38;
    
    // //玩家队伍 故意设置 引发错误以便防止生成
    // gv_9EEEA78D[2] = 2;

    // gv_71C054E5[2] = botUnit;

    //----------------------------------------------------------------------------------------
    
    //全图视野
    VisRevealerCreate(1, RegionEntireMap());

}

//初始化
void onInit(){
    //关闭roundticker
    TriggerEnable(gt_FE0119F2,false);
    TimerPause(gv_8930AB6D,true);

    TriggerAddEventChatMessage(TriggerCreate("onCommand"),1,null,false);
    TriggerAddEventUpgradeLevelChanged(TriggerCreate("onUpgradeLevelChanged"),1);  
    TriggerAddEventPlayerPropChange(TriggerCreate("onPlayerSpendMinerals"),1,c_playerPropMinerals);
    TriggerAddEventPlayerEffectUsed(TriggerCreate("onSPEffectUsed"),1,null);
    TriggerAddEventDialogControl(TriggerCreate("onPanelClickGame"),1,c_invalidDialogControlId,c_triggerControlEventTypeClick);
    TriggerAddEventUnitDied(TriggerCreate("onUnitDied"),null);

    TriggerAddEventUnitDamaged(TriggerCreate("onDamageMelee"),null,c_unitDamageTypeMelee,c_unitDamageEither,null); 
    TriggerAddEventUnitDamaged(TriggerCreate("onDamageRanged"),null,c_unitDamageTypeRanged,c_unitDamageEither,null); 
    TriggerAddEventUnitDamaged(TriggerCreate("onDamageSpell"),null,c_unitDamageTypeSpell,c_unitDamageEither,null);
    TriggerAddEventUnitDamaged(TriggerCreate("onDamageSplash"),null,c_unitDamageTypeSplash,c_unitDamageEither,null);

    initGameSettings();
    initGameData();
    initAlliances();

    loadArane();
    Wait(1.0,c_timeGame);
    onPostInit();


}

//后初始化 -- 英雄生成结束后1秒调用
void onPostInit(){

    libNtve_gf_ShareVisionofUnit(botUnit,true,1);
    libNtve_gf_SetAllianceOneWay(2,1,libNtve_ge_AllianceSetting_Ally);   

    //切换兴奋剂
    UnitAbilityEnable(gv_71C054E5[1],"dbnu_spell_2_0",false);
    UnitAbilityShow(gv_71C054E5[1],"dbnu_spell_2_0",false);
    UnitAbilityEnable(gv_71C054E5[1],"dbnu_spell_2_1",true);
    UnitAbilityShow(gv_71C054E5[1],"dbnu_spell_2_1",true);

    createDialogs();
}

void dummyInit(){
    onPreInit();
    Wait(0.652,c_timeGame);
    onInit();
}