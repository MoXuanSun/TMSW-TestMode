//GongSun_ink 2022

//天赋界面点击触发，选择后再点击取消选择
void onTalentSelectPanelClick(){
    int i;
    int j;

    int player = getPlayerLastPicked();

    gameSoundPlayer(v_additionalSelect);
    //暴力判断找到控件对应数组的位置
    for (i = 0; i < 18; i += 1){
        for (j = 0; j < 5; j += 1){
            if (EventDialogControl() == gv_BB156610.lv_18A4806A[j][i]){
                //如果已经选中
                if (isTalentSelected(i,j,player)){
                    talentSelectData(i,j,false,player);
                    talentSelectUI(i,j,false,testModePlayerGroup);
                    playerTalentSelected[player] -= 1;
                }
                //如果没有被选择
                else{
                    talentSelectData(i,j,true,player);
                    talentSelectUI(i,j,true,testModePlayerGroup);
                    playerTalentSelected[player] += 1;
                    if (playerTalentSelected[player] == 6){
                        // gv_BB156610.lv_54CFCAA4[player] = i;
                        gv_BB156610.lv_54CFCAA4[player] = j;
                    }
                }
            }
        }
    }
}

//英雄技能选择界面点击触发
void onAbilitySelectPanelClick(){
    int i;
    int j;
    gameSoundPlayer(v_additionalSelect);
    for (i = 0; i < 5; i += 1) {
        for (j = 0; j < 5; j += 1) {
            //判断是哪一个技能按键
            if (EventDialogControl() == gv_BB156610.lv_52872E19[i][j]){
                if (isAbilityBtnVisiable(j,i,testModePlayer)){
                    abilitySelectData(0,i,getPlayerLastPicked());
                    abilitySelectUI(j,i,false,testModePlayerGroup);
                }else{
                    abilitySelectData(j,i,getPlayerLastPicked());
                    abilitySelectUI(j,i,true,testModePlayerGroup); 
                }
            }
        }    
    }
}


//辅助技能界面点击触发
void onAdditionalAbilitySelectPanelClick(){
    int eDialogControl = EventDialogControl();
    int i;
    int j;
    gameSoundPlayer(v_additionalSelect);
    for (; i < 3 ; i += 1){
        for (j = 0; j < 10 ; j += 1){
            if (eDialogControl == gv_BB156610.lv_E2CEB0DB[i][j]){
                if (isAdditionalAbilityBtnVisiable(i,j,testModePlayer)){
                    additionalAbilitySelectData(i,0,getPlayerLastPicked());
                    additionalAbilitySelectUI(i,j,false,testModePlayerGroup);
                }else {
                    additionalAbilitySelectData(i,j,getPlayerLastPicked());
                    additionalAbilitySelectUI(i,j,true,testModePlayerGroup);
                }   
            }
        }
    }
}

void onInitPropAddPanelClick(){
    int eDialogControl = EventDialogControl();
    int i;
    gameSoundPlayer(v_additionalSelect);
    for (; i < 6 ; i += 1){
        if (eDialogControl == gv_BB156610.lv_2C4FE4D0[i]){
            initPropAddData(i,getPlayerLastPicked());
            initPropAddUI(i,getPlayerLastPicked(),testModePlayerGroup);  
        }
    }
}

bool onGameUIClick(bool t, bool r){

    int eDialogControl = EventDialogControl();
    int rootDialog = DialogControlGetDialog(eDialogControl);

    //选择按钮
    if (eDialogControl == SELECT_BTN){
        
        if (DialogIsVisible(gv_BB156610.lv_5C8CC8E9[3], testModePlayer)){
            GamePanelShow(c_UIType_talentSelect,false,testModePlayerGroup);
            GamePanelShow(c_UIType_SKillSelect,true,testModePlayerGroup);
        }
        else if (DialogIsVisible(gv_BB156610.lv_DC4A4CA5[0], testModePlayer)){
            GamePanelShow(c_UIType_SKillSelect,false,testModePlayerGroup);
            GamePanelShow(c_UIType_additionalSkillSelect,true,testModePlayerGroup);
        }
        else if (DialogIsVisible(gv_BB156610.lv_8BA882A3[0],testModePlayer)){
            GamePanelShow(c_UIType_additionalSkillSelect,false,testModePlayerGroup);
            GamePanelShow(c_UIType_additionalPropSelect,true,testModePlayerGroup);
        }
        else if (DialogIsVisible(gv_BB156610.lv_C262E618,testModePlayer)){
            GamePanelShow(c_UIType_additionalPropSelect,false,testModePlayerGroup);
            playerSummonHero();
            summoning = false;
            //将玩家的升级同步至回合数
            if (gv_8D37EDF7 !=0){
                fetchPlayerToCurrentRound(getPlayerLastPicked());
            }
        }
    }
    //英雄选择
    else if (rootDialog == gv_277B64A1){
        setHeroLastSelected( (EventDialogControl() - gv_749EC876[0][0]) / 3 );

        gameSoundPlayer(v_heroSelect);
        libNtve_gf_SetDialogItemImage(Dialogs.mainMenu.heroSelectBtn.img,gv_AA1BDB6C[DataTableGetInt(true,"heroId")],testModePlayerGroup);
        libNtve_gf_SetDialogItemTooltip(Dialogs.mainMenu.heroSelectBtn.btn,
            StringExternal(("Button/Tooltip/btn_line_ability_" + gf_45491ABD(DataTableGetInt(true,"heroId")) + "_s")),testModePlayerGroup);

        GamePanelShow(c_UIType_heroSelect,false,testModePlayerGroup);

        if (initialSelect){

            summoning = true;
            setPlayerLastPicked(1);

            gv_131E8983[1] = getHeroLastSelected();
            
            //玩家队伍
            gv_9EEEA78D[1] = MinI(FixedToInt(1 / 6),1);
            
            gv_A6CEA227[0][0] = 1;
            
            //初始化数据
            initDataForPlayer();
            resetPanels(testModePlayerGroup);
            GamePanelShow(c_UIType_talentSelect,true,testModePlayerGroup);
        }
    }
    //初始属性选择
    else if (rootDialog == gv_BB156610.lv_C262E618){
        onInitPropAddPanelClick();
    }
    //辅助技能选择
    else if (rootDialog == gv_BB156610.lv_8BA882A3[0] || 
        rootDialog == gv_BB156610.lv_8BA882A3[1] || 
        rootDialog == gv_BB156610.lv_8BA882A3[2]){
        onAdditionalAbilitySelectPanelClick();
    }
    //技能选择
    else if (rootDialog == gv_BB156610.lv_DC4A4CA5[0] ||
        rootDialog == gv_BB156610.lv_DC4A4CA5[1] ||
        rootDialog == gv_BB156610.lv_DC4A4CA5[2] || 
        rootDialog == gv_BB156610.lv_DC4A4CA5[3] ||
        rootDialog == gv_BB156610.lv_DC4A4CA5[4]){
        onAbilitySelectPanelClick();
    }
    //天赋选择
    else if (rootDialog == gv_BB156610.lv_5C8CC8E9[0] ||
        rootDialog == gv_BB156610.lv_5C8CC8E9[1] ||
        rootDialog == gv_BB156610.lv_5C8CC8E9[2] ||
        rootDialog == gv_BB156610.lv_5C8CC8E9[3] ||
        rootDialog == gv_BB156610.lv_5C8CC8E9[4]){
        onTalentSelectPanelClick();
    }
    
    
    return true;
}

bool onUnitClick(bool t, bool r){
    unit eUnit = EventUnit();
    int newUnitOwner = UnitGetOwner(eUnit);
    int i;

    if (newUnitOwner == 0){
        showHideDummyHud(true,testModePlayerGroup);
        setDummySelected(eUnit);
        return true;
    }
    
    if (getTestPlayerCurrentSelectedUnit() != null){
         //取消选择
        UnitSelect(getTestPlayerCurrentSelectedUnit(), testModePlayer, false);
        UIAlertUnit("MyClickLocations", testModePlayer, EMP_TEXT, null, eUnit);
        storeUpgradeBtns(UnitGetOwner(getTestPlayerCurrentSelectedUnit()));
    }else {
        updatePropBtn(newUnitOwner,testModePlayerGroup);
        restoreUpgradeBtns(newUnitOwner,testModePlayerGroup);
        DialogSetVisible(gv_5C4043F8.lv_B91A282D, testModePlayerGroup, true);
        DialogSetVisible(gv_598EC0B1, testModePlayerGroup, true);
        DialogSetVisible(gv_5C4043F8.lv_8DEC25E2, testModePlayerGroup, true);
        DialogSetVisible(gv_5C4043F8.lv_AF2E051A, testModePlayerGroup, true);
    }
    //--------------------------
    //选择新单位
    //移除不可选中行为 这个行为绑定了攻击距离升级 不能移除
    UnitBehaviorRemove(eUnit, "nodie2", 1);
    libNtve_gf_ShareVisionofUnit(getTestPlayerCurrentSelectedUnit(),false,testModePlayer);
    UnitSelect(eUnit, testModePlayer, true);
    setTestPlayerCurrentSelectedUnit(eUnit);
    //添加不可选中行为
    UnitBehaviorAdd(eUnit, "nodie2",eUnit, 1);

    updatePropBtn(newUnitOwner,testModePlayerGroup);
    updateFullGameUI(newUnitOwner,testModePlayerGroup);
    restoreUpgradeBtns(newUnitOwner,testModePlayerGroup);
    
    libNtve_gf_ShareVisionofUnit(eUnit,true,testModePlayer);
    return true;
}

bool onKeyEsc(bool t, bool r){

    showHideDummyHud(false,testModePlayerGroup);
    GamePanelShow(c_UIType_heroSelect,false,testModePlayerGroup);
    GamePanelShow(c_UIType_additionalPropSelect,false,testModePlayerGroup);
    GamePanelShow(c_UIType_additionalSkillSelect,false,testModePlayerGroup);
    GamePanelShow(c_UIType_heroSelect,false,testModePlayerGroup);
    GamePanelShow(c_UIType_SKillSelect,false,testModePlayerGroup);
    GamePanelShow(c_UIType_talentSelect,false,testModePlayerGroup);
    summoning = false;
    return true;
}

void initGameUIClickTrigger(){
    trigger t = TriggerCreate("onGameUIClick");
    trigger t1 = TriggerCreate("onUnitClick");
    trigger t2 = TriggerCreate("onKeyEsc");

    TriggerAddEventDialogControl(t,1,c_invalidDialogControlId,c_triggerControlEventTypeClick);
    TriggerAddEventUnitClick(t1,null,testModePlayer);
    TriggerAddEventKeyPressed(t2,testModePlayer,c_keyEscape, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);

    DataTableSetTrigger(true,"trigger-onGameUIClick",t);
    DataTableSetTrigger(true,"onUnitClick",t1);
}
