//GongSun_ink 2022
//1.记录text消息
//2.记录string消息
void logMessageT(text message,int level);
void logMessage(string message,int level);

void debugT(text message);
void verboseT(text message);
void errorT(text message);
void warningT(text message);

void debug(string message);
void verbose(string message);
void error(string message);
void warning(string message);

struct Logger{
    funcref<logMessageT> logMessageT;
    funcref<logMessage> logMessage;

    funcref<debugT> debugT;
    funcref<verboseT> verboseT;
    funcref<errorT> errorT;
    funcref<warningT> warningT;

    funcref<debug> debug;
    funcref<verbose> verbose;
    funcref<error> error;
    funcref<warning> warning;
};

Logger defaultLogger;

void logger(text message){

    text gameTime = StringToText("<c val = \"00FFFF\">[GameTime:"+FixedToString(GameGetMissionTime(),2)+"]</c> ");

    // TriggerDebugWindowOpen(true);

    if (DialogControlGetItemCount(Dialogs.logger.listBoxControl,testModePlayer) > 200){
        DialogControlRemoveItem(Dialogs.logger.listBoxControl,testModePlayerGroup,0);
    }

    if (DialogControlGetItemCount(Dialogs.logger.listBoxControl,testModePlayer) > 0){
        DialogControlRemoveItem(Dialogs.logger.listBoxControl,testModePlayerGroup,DialogControlGetItemCount(Dialogs.logger.listBoxControl,testModePlayer));
    }
   
    DialogControlAddItem(Dialogs.logger.listBoxControl,testModePlayerGroup,gameTime + message);

    //每一次都添加一个空的item并选中，下一次再删除在创建，这样就可以自动滑动logger
    DialogControlAddItem(Dialogs.logger.listBoxControl,testModePlayerGroup,EMP_TEXT);
    
    DialogControlSelectItem(Dialogs.logger.listBoxControl,testModePlayerGroup,
        DialogControlGetItemCount(Dialogs.logger.listBoxControl,testModePlayer));
}


bool loggerAbility(bool r, bool t){
    
    return true;
}
bool loggerEffect(bool r, bool t){

    return true;
}
bool loggerBehavior(bool r, bool t){
    debug(EventUnitBehavior());
    return true;
}

void debug(string message){

}

void initLogger(){
    trigger t1 = TriggerCreate("loggerAbility");
    trigger t2 = TriggerCreate("loggerEffect");
    trigger t3 = TriggerCreate("loggerBehavior");

    // defaultLogger.debug = debug();

    TriggerAddEventUnitAbility(t1,null,null,c_unitAbilStageAll,false);
    TriggerAddEventPlayerEffectUsed(t2,c_playerAny,null);
    TriggerAddEventUnitBehaviorChange(t3,null,null,c_unitBehaviorChangeAny);
}