//GongSun_ink 2022

void updateHeroPropProgressBar(int currentRemotingPlayer, unit inUnit, int type){
    
    if (type == PROGRESS_TYPE_LIFE){
        gf_2AF0A3EE(currentRemotingPlayer, inUnit, gv_5C4043F8.lv_23D09B56, c_unitPropLifePercent, gv_5C4043F8.lv_24D62004, c_unitPropLife, c_unitPropLifeMax);
    }
    else if (type == PROGRESS_TYPE_ENERGY){
        gf_2AF0A3EE(currentRemotingPlayer, inUnit, gv_5C4043F8.lv_472F835E, c_unitPropEnergyPercent, gv_5C4043F8.lv_D9B13017, c_unitPropEnergy, c_unitPropEnergyMax);
    }
    else{
        
    }

}

void updateStatusBar(int currentRemotingPlayer,unit inUnit){
    updateHeroPropProgressBar(currentRemotingPlayer, inUnit, PROGRESS_TYPE_LIFE);
    updateHeroPropProgressBar(currentRemotingPlayer, inUnit, PROGRESS_TYPE_ENERGY);
}

//选择
void talentSelectUI(int row, int column, bool select, playergroup p){
    //跳过空的
    if (gv_BB156610.lv_DEE7AA8A[column][row] == c_invalidDialogControlId || gv_BB156610.lv_48C4BDD0[column][row] == c_invalidDialogControlId){
        return;
    }

    if (select){
        if (column == 0)
        {
            libNtve_gf_SetDialogItemImage(gv_BB156610.lv_DEE7AA8A[column][row], "character\\newroon\\border\\my_roon_system_border_0_yellow_com.dds", p);
            libNtve_gf_SetDialogItemColor(gv_BB156610.lv_48C4BDD0[column][row], Color(89.41, 94.90, 24.31), p);
        }
        else if (column == 1)
        {
            libNtve_gf_SetDialogItemImage(gv_BB156610.lv_DEE7AA8A[column][row], "character\\newroon\\border\\my_roon_system_border_1_red_com.dds", p);
            libNtve_gf_SetDialogItemColor(gv_BB156610.lv_48C4BDD0[column][row], Color(60.78, 22.75, 20.00), p);
        }
        else if (column == 2)
        {
            libNtve_gf_SetDialogItemImage(gv_BB156610.lv_DEE7AA8A[column][row], "character\\newroon\\border\\my_roon_system_border_2_violet_com.dds", p);
            libNtve_gf_SetDialogItemColor(gv_BB156610.lv_48C4BDD0[column][row], Color(73.33, 30.20, 96.86), p);
        }
        else if (column == 3)
        {
            libNtve_gf_SetDialogItemImage(gv_BB156610.lv_DEE7AA8A[column][row], "character\\newroon\\border\\my_roon_system_border_3_green_com.dds", p);
            libNtve_gf_SetDialogItemColor(gv_BB156610.lv_48C4BDD0[column][row], Color(34.90, 95.69, 31.76), p);
        }
        else if (column == 4)
        {
            libNtve_gf_SetDialogItemImage(gv_BB156610.lv_DEE7AA8A[column][row], "character\\newroon\\border\\my_roon_system_border_4_teal_com.dds", p);
            libNtve_gf_SetDialogItemColor(gv_BB156610.lv_48C4BDD0[column][row], Color(30.98, 85.10, 96.86), p);
        }
        DialogControlSetVisible(gv_BB156610.lv_51B06619[column][row],p, true);
       

    }
    else{  
        if (column == 0)
        {
            libNtve_gf_SetDialogItemImage(gv_BB156610.lv_DEE7AA8A[column][row], "character\\newroon\\border\\my_roon_system_border_0_yellow.dds", p);
            libNtve_gf_SetDialogItemColor(gv_BB156610.lv_48C4BDD0[column][row], Color(96.08, 98.43, 70.98), p);
        }
        else if (column == 1)
        {
            libNtve_gf_SetDialogItemImage(gv_BB156610.lv_DEE7AA8A[column][row], "character\\newroon\\border\\my_roon_system_border_1_red.dds", p);
            libNtve_gf_SetDialogItemColor(gv_BB156610.lv_48C4BDD0[column][row], Color(82.35, 50.98, 48.24), p);
        }
        else if (column == 2)
        {
            libNtve_gf_SetDialogItemImage(gv_BB156610.lv_DEE7AA8A[column][row], "character\\newroon\\border\\my_roon_system_border_2_violet.dds", p);
            libNtve_gf_SetDialogItemColor(gv_BB156610.lv_48C4BDD0[column][row], Color(88.24, 70.20, 98.43), p);
        }
        else if (column == 3)
        {
            libNtve_gf_SetDialogItemImage(gv_BB156610.lv_DEE7AA8A[column][row], "character\\newroon\\border\\my_roon_system_border_3_green.dds", p);
            libNtve_gf_SetDialogItemColor(gv_BB156610.lv_48C4BDD0[column][row], Color(72.16, 98.43, 70.98), p);
        }
        else if (column == 4)
        {
            libNtve_gf_SetDialogItemImage(gv_BB156610.lv_DEE7AA8A[column][row], "character\\newroon\\border\\my_roon_system_border_4_teal.dds", p);
            libNtve_gf_SetDialogItemColor(gv_BB156610.lv_48C4BDD0[column][row], Color(70.98, 93.33, 98.43), p);
        }
        //辉光效果
        DialogControlSetVisible(gv_BB156610.lv_51B06619[column][row], p, false);
    }
}
//启用
void talentEnableUI(int row, int column, bool enable, playergroup p){

    //跳过空的
    if (gv_BB156610.lv_E2A89576[column][row] == c_invalidDialogControlId || gv_BB156610.lv_DEE7AA8A[column][row] == c_invalidDialogControlId ||
        gv_BB156610.lv_18A4806A[column][row] == c_invalidDialogControlId){
        return;
    }

    DialogControlSetEnabled(gv_BB156610.lv_18A4806A[column][row], p, enable);
    talentSelectUI(row,column,false,p);
    DialogControlSetEnabled(gv_BB156610.lv_E2A89576[column][row], p, enable);
    DialogControlSetEnabled(gv_BB156610.lv_DEE7AA8A[column][row], p, enable);
    DialogControlSetEnabled(gv_BB156610.lv_51B06619[column][row], p, true);
    DialogControlSetEnabled(gv_BB156610.lv_E2A89576[column][row], p, true);
    DialogControlSetEnabled(gv_BB156610.lv_DEE7AA8A[column][row], p, true);
}

//测试模式下，点击其他玩家的单位时需要展示其他玩家的升级窗口
void upgradeBtnShow(int index,bool show, playergroup p){
    DialogControlSetVisible(gv_99F9B79B[index], p, show);
    DialogControlSetVisible(gv_81AD7FB9[index], p, show);
}

void upgradeBtnEnable(int index, bool show,playergroup p){
    DialogControlSetEnabled(gv_99F9B79B[index], p, show);
}

void updateAbilityPickPanel(int currentRemotingPlayer, playergroup p){
    int init_i;
    int column;
    int row;
    string[5] abilityArray;
    int abilityCount;
    string heroUnitName = gf_45491ABD(gv_131E8983[currentRemotingPlayer]);

    abilityArray[0] = "0t";
    abilityArray[1] = "1q";
    abilityArray[2] = "2w";
    abilityArray[3] = "3e";
    abilityArray[4] = "4r";
    //先全部隐藏
    
    for (; column < 5 ; column += 1){
        //row=0 每次循环重置一遍
        for (row = 0; row < 5; row += 1){
            DialogControlSetVisible(gv_BB156610.lv_429AF84E[column][row], p, false);
            DialogControlSetVisible(gv_BB156610.lv_0F36D2DD[column][row], p, false);
            DialogControlSetVisible(gv_BB156610.lv_9E2557F2[column][row], p, false);
            DialogControlSetVisible(gv_BB156610.lv_52872E19[column][row], p, false);
        }
    }
    
    for (column = 0 ; column < 5 ; column += 1)
    {
        abilityCount = gv_385F7DDF[currentRemotingPlayer].lv_1F4AC30A[column];
        //注意必须是小于等于 这个数组赋值时0代表该列有一个技能
        for (row = 0 ; row <= abilityCount; row += 1)
        {  
            gv_385F7DDF[currentRemotingPlayer].lv_26F27239[column][row] = (("character\\btn\\" + heroUnitName + "_" + IntToString((row + 1)) + "_" + abilityArray[column] + ".dds"));
            libNtve_gf_SetDialogItemImage(gv_BB156610.lv_429AF84E[column][row], gv_385F7DDF[currentRemotingPlayer].lv_26F27239[column][row], p);
            libNtve_gf_SetDialogItemText(gv_BB156610.lv_9E2557F2[column][row], StringExternal(("Button/Name/dbbu" + heroUnitName + "_" + IntToString((row + 1)) + "_" + abilityArray[column])), p);
            libNtve_gf_SetDialogItemTooltip(gv_BB156610.lv_52872E19[column][row], StringExternal(("Button/Tooltip/dbbu" + heroUnitName + "_" + IntToString((row + 1)) + "_" + abilityArray[column])), p);
            DialogControlSetVisible(gv_BB156610.lv_429AF84E[column][row], p, true);
            DialogControlSetVisible(gv_BB156610.lv_0F36D2DD[column][row], p, true);
            DialogControlSetVisible(gv_BB156610.lv_9E2557F2[column][row], p, true);
            DialogControlSetVisible(gv_BB156610.lv_52872E19[column][row], p, true);
        }
    }
}

//每列技能只能选择一个 所以不需要多一个enable函数
void abilitySelectUI(int row, int column, bool select, playergroup p){

    IntLoopBegin(0,4);
    while(!IntLoopDone()){
        DialogControlSetEnabled(gv_BB156610.lv_52872E19[column][IntLoopCurrent()], p, !select);
        DialogControlSetEnabled(gv_BB156610.lv_429AF84E[column][IntLoopCurrent()], p, !select);
        DialogControlSetEnabled(gv_BB156610.lv_0F36D2DD[column][IntLoopCurrent()], p, !select);
        IntLoopStep();
    }
    IntLoopEnd();

    //源代码是隐藏起来了 导致看不到tooltip
    if (select){
        DialogControlSetEnabled(gv_BB156610.lv_52872E19[column][row], p, true);
        DialogControlSetEnabled(gv_BB156610.lv_429AF84E[column][row], p, true);
        DialogControlSetEnabled(gv_BB156610.lv_0F36D2DD[column][row], p, true);
        libNtve_gf_SetDialogItemImage(gv_BB156610.lv_0F36D2DD[column][row], "character\\newroon\\border\\my_roon_system_border_white.dds", p);
    }else {
        libNtve_gf_SetDialogItemImage(gv_BB156610.lv_0F36D2DD[column][row], "character\\newroon\\border\\my_roon_system_border_blue.dds", p);
    }

    DialogControlSetVisible(gv_BB156610.lv_0B0B9E92[column][row], p, select);
    
}

//技能初始id0问题 player - testmodeplayer
bool isAbilityBtnVisiable(int row, int column, int player){
    //初始就是可见的
    return DialogControlIsVisible(gv_BB156610.lv_0B0B9E92[column][row],player);
}

//选择的border不是独立出来的
void additionalAbilitySelectUI(int row, int column, bool select , playergroup p){

    IntLoopBegin(0,9);
    while(!IntLoopDone()){
        if ((gv_BB156610.lv_E2CEB0DB[row][IntLoopCurrent()] != c_invalidDialogControlId)){
            DialogControlSetEnabled(gv_BB156610.lv_E2CEB0DB[row][IntLoopCurrent()], p, !select);
            DialogControlSetEnabled(gv_BB156610.lv_6B770A19[row][IntLoopCurrent()], p, !select);
            DialogControlSetEnabled(gv_BB156610.lv_7E6E2096[row][IntLoopCurrent()], p, !select);
        }
        IntLoopStep();
    }
    IntLoopEnd();

    if (select){
        DialogControlSetEnabled(gv_BB156610.lv_E2CEB0DB[row][column], p, true);
        DialogControlSetEnabled(gv_BB156610.lv_6B770A19[row][column], p, true);
        DialogControlSetEnabled(gv_BB156610.lv_7E6E2096[row][column], p, true);      
        libNtve_gf_SetDialogItemImage(gv_BB156610.lv_7E6E2096[row][column], "character\\newroon\\border\\my_roon_system_border_white.dds", p);
    }else {
        libNtve_gf_SetDialogItemImage(gv_BB156610.lv_7E6E2096[row][column], "character\\newroon\\border\\my_roon_system_border_blue.dds", p);
    }
    
    DialogControlSetVisible(gv_BB156610.lv_00F08445[row][column], p, select);

}

bool isAdditionalAbilityBtnVisiable(int row, int column, int player){
    return DialogControlIsVisible(gv_BB156610.lv_00F08445[row][column],player);
}

void initPropAddUI(int row, int currentRemotingPlayer, playergroup p){

    IntLoopBegin(0,5);
    while(!IntLoopDone()){  
        DialogControlSetEnabled(gv_BB156610.lv_2C4FE4D0[IntLoopCurrent()], p, false);
        DialogControlSetEnabled(gv_BB156610.lv_82EADE67[IntLoopCurrent()], p, false);
        IntLoopStep();
    }
    IntLoopEnd();

    
    if (gv_BB156610.lv_ADADDA87[currentRemotingPlayer] < 0){
        libNtve_gf_SetDialogItemText(gv_BB156610.lv_0DC14927, (StringExternal("Param/Value/79EAC857") + 
            IntToText(0) + StringExternal("Param/Value/38789FB1")), p);
    }else {
        libNtve_gf_SetDialogItemText(gv_BB156610.lv_0DC14927, (StringExternal("Param/Value/20352243") + 
            IntToText(gv_BB156610.lv_ADADDA87[currentRemotingPlayer]) + StringExternal("Param/Value/23EA1D0C")), p);
    }
    
    if ((gv_BB156610.lv_D98ECB52[currentRemotingPlayer][row] >= 8))
    {
        libNtve_gf_SetDialogItemText(gv_BB156610.lv_B37F6CAA[row], IntToText(9), p);
    }
    else
    {
        libNtve_gf_SetDialogItemText(gv_BB156610.lv_B37F6CAA[row], IntToText(gv_BB156610.lv_D98ECB52[currentRemotingPlayer][row]), p);
    }

    if ((gv_BB156610.lv_ADADDA87[currentRemotingPlayer] == 0)){
        if ((gv_BB156610.lv_D98ECB52[currentRemotingPlayer][row] == 8)){
            libNtve_gf_SetDialogItemText(gv_BB156610.lv_0DC14927, (StringExternal("Param/Value/337833B7") + IntToText(0) + StringExternal("Param/Value/8E3AB2BA")), p);
                libNtve_gf_SetDialogItemText(gv_BB156610.lv_B37F6CAA[row], StringExternal("Param/Value/765E94B9"), p);
        }
        else{
            libNtve_gf_SetDialogItemText(gv_BB156610.lv_0DC14927, (StringExternal("Param/Value/24CD5924") + IntToText(gv_BB156610.lv_D98ECB52[currentRemotingPlayer][row]) + StringExternal("Param/Value/36E0585E")), p);
        }
    } else{
        Wait(0.35, c_timeGame);
        IntLoopBegin(0,5);
        while(!IntLoopDone()){  
            DialogControlSetEnabled(gv_BB156610.lv_2C4FE4D0[IntLoopCurrent()], p, true);
            DialogControlSetEnabled(gv_BB156610.lv_82EADE67[IntLoopCurrent()], p, true);
            IntLoopStep();
        }
        IntLoopEnd();
    }
}
//重置天赋选择、技能选择、初始属性选择、辅助技能选择面板 优化性能
void resetPanels(playergroup p){
    int i;
    int j;
    int offsetX = 50;

    if (gv_BB156610.lv_5C8CC8E9[0] == c_invalidDialogId){
        TriggerExecute(gt_509C5828, true, true);

        DialogSetPosition(gv_BB156610.lv_5C8CC8E9[0], c_anchorLeft, 0, 0);   
        DialogSetPositionRelative(gv_BB156610.lv_5C8CC8E9[1], c_anchorCenter, gv_BB156610.lv_5C8CC8E9[0], c_anchorRight, (offsetX + 280 / 2), 0);    
        DialogSetPositionRelative(gv_BB156610.lv_5C8CC8E9[2], c_anchorCenter, gv_BB156610.lv_5C8CC8E9[1], c_anchorRight, (offsetX + 280 / 2), 0);    
        DialogSetPositionRelative(gv_BB156610.lv_5C8CC8E9[3], c_anchorCenter, gv_BB156610.lv_5C8CC8E9[2], c_anchorRight, (offsetX + 280 / 2), 0);
        DialogSetPositionRelative(gv_BB156610.lv_5C8CC8E9[4], c_anchorCenter, gv_BB156610.lv_5C8CC8E9[3], c_anchorRight, (offsetX + 280 / 2), 0);
    
        for (i = 0; i < 18; i += 1){
            for (j = 0; j < 5; j += 1){
                talentEnableUI(i,j,true,p);
            }
        }
    }
    //天赋
    for (; i < 18; i += 1){
        for (j = 0; j < 5; j += 1){
            talentSelectUI(i,j,false,p);
        }
    } 

    if (gv_BB156610.lv_DC4A4CA5[0] == c_invalidDialogId){
        TriggerExecute(gt_597AD091,false,true);
        offsetX = 50;
        DialogSetPosition(gv_BB156610.lv_DC4A4CA5[0], c_anchorLeft, 0, 0);   
        DialogSetPositionRelative(gv_BB156610.lv_DC4A4CA5[1], c_anchorCenter, gv_BB156610.lv_DC4A4CA5[0], c_anchorRight, (offsetX + 280 / 2), 0);    
        DialogSetPositionRelative(gv_BB156610.lv_DC4A4CA5[2], c_anchorCenter, gv_BB156610.lv_DC4A4CA5[1], c_anchorRight, (offsetX + 280 / 2), 0);    
        DialogSetPositionRelative(gv_BB156610.lv_DC4A4CA5[3], c_anchorCenter, gv_BB156610.lv_DC4A4CA5[2], c_anchorRight, (offsetX + 280 / 2), 0);
        DialogSetPositionRelative(gv_BB156610.lv_DC4A4CA5[4], c_anchorCenter, gv_BB156610.lv_DC4A4CA5[3], c_anchorRight, (offsetX + 280 / 2), 0);
    }   

    //更新可选技能
    updateAbilityPickPanel(getPlayerLastPicked(),p);
    //技能
    for (i = 0; i < 5; i += 1){
        IntLoopBegin(0,4);
        while(!IntLoopDone()){
            DialogControlSetEnabled(gv_BB156610.lv_52872E19[i][IntLoopCurrent()], p, true);
            DialogControlSetEnabled(gv_BB156610.lv_429AF84E[i][IntLoopCurrent()], p, true);
            DialogControlSetEnabled(gv_BB156610.lv_0F36D2DD[i][IntLoopCurrent()], p, true);
            libNtve_gf_SetDialogItemImage(gv_BB156610.lv_0F36D2DD[i][IntLoopCurrent()], "character\\newroon\\border\\my_roon_system_border_blue.dds", p);
            DialogControlSetVisible(gv_BB156610.lv_0B0B9E92[i][IntLoopCurrent()], p, false);
            IntLoopStep();
        }
        IntLoopEnd();
    }  
    if (gv_BB156610.lv_C262E618 == c_invalidDialogId){
        TriggerExecute(gt_255D1150,false,true);
    }

    //辅助技能
    for (i = 0; i < 3 ; i += 1){
        IntLoopBegin(0,9);
        while(!IntLoopDone()){
            if ((gv_BB156610.lv_E2CEB0DB[i][IntLoopCurrent()] != c_invalidDialogControlId)){
                DialogControlSetEnabled(gv_BB156610.lv_E2CEB0DB[i][IntLoopCurrent()], p, true);
                DialogControlSetEnabled(gv_BB156610.lv_6B770A19[i][IntLoopCurrent()], p, true);
                DialogControlSetEnabled(gv_BB156610.lv_7E6E2096[i][IntLoopCurrent()], p, true);
                libNtve_gf_SetDialogItemImage(gv_BB156610.lv_7E6E2096[i][IntLoopCurrent()], "character\\newroon\\border\\my_roon_system_border_blue.dds", p);
                DialogControlSetVisible(gv_BB156610.lv_00F08445[i][IntLoopCurrent()], p, false);
            }
            IntLoopStep();
        }
        IntLoopEnd();
    }

    if (gv_BB156610.lv_8BA882A3[0] == c_invalidDialogId){
        TriggerExecute(gt_65AE4A93,false,true);
        
        DialogSetPosition(gv_BB156610.lv_8BA882A3[0], c_anchorLeft, 0, 0);    
        DialogSetPositionRelative(gv_BB156610.lv_8BA882A3[1], c_anchorCenter, gv_BB156610.lv_8BA882A3[0], c_anchorRight, (offsetX + 656 / 2), 0);    
        DialogSetPositionRelative(gv_BB156610.lv_8BA882A3[2], c_anchorCenter, gv_BB156610.lv_8BA882A3[1], c_anchorRight, (offsetX + 656 / 2), 0);
    }

    //初始属性
    libNtve_gf_SetDialogItemText(gv_BB156610.lv_0DC14927, (StringExternal("Param/Value/79EAC857") + 
        IntToText(0) + StringExternal("Param/Value/38789FB1")), p);

    IntLoopBegin(0,5);
    while(!IntLoopDone()){  
        DialogControlSetEnabled(gv_BB156610.lv_2C4FE4D0[IntLoopCurrent()], p, true);
        DialogControlSetEnabled(gv_BB156610.lv_82EADE67[IntLoopCurrent()], p, true);
        libNtve_gf_SetDialogItemText(gv_BB156610.lv_B37F6CAA[IntLoopCurrent()], IntToText(0), p);
        IntLoopStep();
    }
    IntLoopEnd();
}

void GamePanelShow(int type, bool show, playergroup p){
    int i;
    int j;

    if (type == c_UIType_heroSelect){
        if (gv_277B64A1 == c_invalidDialogId){
            TriggerExecute(gt_7903E3D3, true, true);
        }
        DialogSetVisible(gv_277B64A1,p,show);
    }
    else if (type == c_UIType_talentSelect){
        
        if (SELECT_BTN == c_invalidDialogId)
        {
            DialogCreate(240, 80, c_anchorCenter, 0, 0, true);
    
            DialogSetPositionRelative(DialogLastCreated(), c_anchorCenter, gv_BB156610.lv_5C8CC8E9[2], c_anchorTop, 0, -100);
    
            DialogSetImageVisible(DialogLastCreated(), false);
    
            DialogSetVisible(DialogLastCreated(), p, true);
    
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 232, 74, c_anchorCenter, 0, 0, null, StringToText("确认"), "");
            // libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "GamesUis\\MyG_BTN_Alpha.dds", p);
            // libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "GamesUis\\MyG_All_Blue.dds", p);
    
            SELECT_BTN = DialogControlLastCreated();
            DialogControlSetEnabled(SELECT_BTN, p, true);
        }

        DialogControlSetVisible(SELECT_BTN, p, show);

        DialogSetVisible(gv_BB156610.lv_5C8CC8E9[0], p, show);
        DialogSetVisible(gv_BB156610.lv_5C8CC8E9[1], p, show);
        DialogSetVisible(gv_BB156610.lv_5C8CC8E9[2], p, show);
        DialogSetVisible(gv_BB156610.lv_5C8CC8E9[3], p, show);
        DialogSetVisible(gv_BB156610.lv_5C8CC8E9[4], p, show);
            
    }
    else if (type == c_UIType_SKillSelect){
        DialogControlSetVisible(SELECT_BTN, p, show);
        DialogSetVisible(gv_BB156610.lv_DC4A4CA5[0], p, show);
        DialogSetVisible(gv_BB156610.lv_DC4A4CA5[1], p, show);
        DialogSetVisible(gv_BB156610.lv_DC4A4CA5[2], p, show);
        DialogSetVisible(gv_BB156610.lv_DC4A4CA5[3], p, show);
        DialogSetVisible(gv_BB156610.lv_DC4A4CA5[4], p, show);
        
    }
    else if (type == c_UIType_additionalPropSelect){
       
        DialogControlSetVisible(SELECT_BTN, p, show);

        DialogSetVisible(gv_BB156610.lv_C262E618, p, show);
    }
    else if (type == c_UIType_additionalSkillSelect){
        
        DialogControlSetVisible(SELECT_BTN, p, show);
        
        DialogSetVisible(gv_BB156610.lv_8BA882A3[0], p, show);
        DialogSetVisible(gv_BB156610.lv_8BA882A3[1], p, show);
        DialogSetVisible(gv_BB156610.lv_8BA882A3[2], p, show);
    
    }
} 

void loadDummyHud(playergroup p){
    int i;
    int mphpSize;

    //头像
    //hud头像
    libNtve_gf_SetDialogItemImage(gv_2DED9336[1], gv_AA1BDB6C[38], p);
    //等级
    libNtve_gf_SetDialogItemText(gv_2DED9336[2], StringToText("???"), p);
    //颜色
    libNtve_gf_SetDialogItemColor(gv_2DED9336[3], Color(100,0,0), p);
    //玩家名
    libNtve_gf_SetDialogItemText(gv_2DED9336[3], StringToText("别看了，你打不动我"), p);
    //属性设置
    for (; i < 7 ; i += 1)
    {
        libNtve_gf_SetDialogItemText(gv_D33859CA[i], IntToText(0), p);
    }

    libNtve_gf_SetDialogItemText(gv_D33859CA[8], (IntToText(1000000) + (StringExternal("Param/Value/858C3123") + IntToText(1000000))), p);
    libNtve_gf_SetDialogItemText(gv_D33859CA[9], (IntToText(0) + (StringExternal("Param/Value/7EE57AF9") + IntToText(0))), p);
    
    mphpSize = MaxI(FixedToInt(268.0 * (100) * 0.01),1);
    DialogControlSetSize(gv_2DED9336[4], p, mphpSize, 16);
}

void showHideDummyHud(bool show, playergroup p){
    DialogSetVisible(gv_4EE04C84, p, show);
    if (!show){
        setDummySelected(null);
    }
}

//更新下方的小图标
void updateTalentDisplay(int currentRemotingPlayer, playergroup p){
    int i;

    //先刷新
    for (; i < 8 ; i += 1){
        DialogControlSetPropertyAsText(gv_CEBF1A9E[i],c_triggerControlPropertyTooltip,p,EMP_TEXT);
        DialogControlSetPropertyAsString(gv_CEBF1A9E[i],c_triggerControlPropertyImage,p,"GamesUis\\Profiles\\Profile_Pic_Creater.dds");
    }

    //更新UI
    //前6个
    for (i = 0; i < 5; i += 1){
        if ((i != gv_BB156610.lv_54CFCAA4[currentRemotingPlayer])){
            gf_E8DB52E3(currentRemotingPlayer, i, 0);
        }
    }
    //最后一个
    gf_E8DB52E3(currentRemotingPlayer, gv_BB156610.lv_54CFCAA4[currentRemotingPlayer], 1);

    for (i = 0 ; i < 8 ; i +=1){
        DialogControlSetPropertyAsText(gv_CEBF1A9E[i],c_triggerControlPropertyTooltip,p,DialogControlGetPropertyAsText(gv_CEBF1A9E[i],c_triggerControlPropertyTooltip,currentRemotingPlayer));
        DialogControlSetPropertyAsString(gv_CEBF1A9E[i],c_triggerControlPropertyImage,p,DialogControlGetPropertyAsString(gv_CEBF1A9E[i],c_triggerControlPropertyImage,currentRemotingPlayer));
    }

}

void updatePropBtn(int currentRemotingPlayer, playergroup refractTargetPlayerGroup){
    bool flag;

    IntLoopBegin(0,14);
    while(!IntLoopDone()){
        if (IntLoopCurrent() == gv_288042C5.lv_756C1089){
            if ((gv_60E73511[currentRemotingPlayer][IntLoopCurrent()] >= gv_533C63F3[currentRemotingPlayer]))
            {
                flag = false;
            }
            else
            {
                flag = true;
            }
        }
        else if (IntLoopCurrent() == gv_288042C5.lv_235E8DEB){
            if ((gv_BB156610.lv_48849745[currentRemotingPlayer][gv_55AE090B.lv_5305D027][gv_55AE090B.lv_D52E7207] == true))
            {
                if ((gv_60E73511[currentRemotingPlayer][IntLoopCurrent()] >= gv_10AEE349))
                {
                    flag = false;
                }
                else
                {
                    flag = true;
                }
            }
            else
            {
                if ((gv_60E73511[currentRemotingPlayer][IntLoopCurrent()] >= gv_D79965A1[1][IntLoopCurrent()]))
                {
                    flag = false;
                }
                else
                {
                    flag = true;
                }
            }
        }
        else if (IntLoopCurrent() == gv_288042C5.lv_E9CF3C37){
            if ((gv_BB156610.lv_48849745[currentRemotingPlayer][gv_55AE090B.lv_E9BE1477][gv_55AE090B.lv_35263ECD] == true))
            {
                if ((gv_60E73511[currentRemotingPlayer][IntLoopCurrent()] >= gv_37008C71[currentRemotingPlayer]))
                {
                    flag = false;
                }
                else
                {
                    flag = true;
                }
            }
            else
            {
                if ((gv_60E73511[currentRemotingPlayer][IntLoopCurrent()] >= gv_D79965A1[1][IntLoopCurrent()]))
                {
                    flag = false;
                }
                else
                {
                    flag = true;
                }
            }
        }
        else{
            if ((gv_60E73511[currentRemotingPlayer][IntLoopCurrent()] >= gv_D79965A1[1][IntLoopCurrent()]))
            {
                flag = false;
            }
            else
            {
                flag = true;
            }
        }

        if ((flag == false)){
            DialogControlSetEnabled(gv_F4E2C4A0[0][IntLoopCurrent()], refractTargetPlayerGroup, false);
            DialogControlSetEnabled(gv_F4E2C4A0[1][IntLoopCurrent()], refractTargetPlayerGroup, false);
            DialogControlSetEnabled(gv_F4E2C4A0[2][IntLoopCurrent()], refractTargetPlayerGroup, false);
        }
        else{
            DialogControlSetEnabled(gv_F4E2C4A0[0][IntLoopCurrent()], refractTargetPlayerGroup, true);
            DialogControlSetEnabled(gv_F4E2C4A0[1][IntLoopCurrent()], refractTargetPlayerGroup, true);
            DialogControlSetEnabled(gv_F4E2C4A0[2][IntLoopCurrent()], refractTargetPlayerGroup, true);
        }
       
        IntLoopStep();
    }
    IntLoopEnd();

    libNtve_gf_SetDialogItemTooltip(gv_F4E2C4A0[0][10], 
        gf_D7D17EEF(gv_D79965A1[0][gv_288042C5.lv_107F1097], gv_D79965A1[1][10], gv_288042C5.lv_47E787AD, gv_8ED21F40[gv_288042C5.lv_107F1097], 2, StringExternal("Button/Tooltip/db_txt_preset_zameText_81")), PlayerGroupAll());
     //判断玩家是不是远程角色 详情见gf_5B3968D5(); true为远程
     if ((gv_4B57750F[currentRemotingPlayer] == true)){
        //如果玩家的加点大于加点上限
        if ((gv_60E73511[currentRemotingPlayer][10] >= gv_D79965A1[1][10]))
        {
            DialogControlSetEnabled(gv_F4E2C4A0[0][10], refractTargetPlayerGroup, false);
            DialogControlSetEnabled(gv_F4E2C4A0[1][10], refractTargetPlayerGroup, false);
            DialogControlSetEnabled(gv_F4E2C4A0[2][10], refractTargetPlayerGroup, false);
        }
        else
        {
            DialogControlSetEnabled(gv_F4E2C4A0[0][10], refractTargetPlayerGroup, true);
            DialogControlSetEnabled(gv_F4E2C4A0[1][10], refractTargetPlayerGroup, true);
            DialogControlSetEnabled(gv_F4E2C4A0[2][10], refractTargetPlayerGroup, true);
        }   
    }else {
        DialogControlSetEnabled(gv_F4E2C4A0[0][10], refractTargetPlayerGroup, false);
        DialogControlSetEnabled(gv_F4E2C4A0[1][10], refractTargetPlayerGroup, false);
        DialogControlSetEnabled(gv_F4E2C4A0[2][10], refractTargetPlayerGroup, false);
    }
}

//更新状态栏、等级栏、头像和天赋小图标
void updateFullGameUI(int currentRemotingPlayer, playergroup refractTargetPlayerGroup){
    //右侧数值栏数据

    //ap
    libNtve_gf_SetDialogItemText(gv_5C4043F8.lv_AD040151[1], FixedToText(gv_9CB902A4[currentRemotingPlayer][gv_15A72892.lv_89BFC1C4], 2), refractTargetPlayerGroup);
    //物抗
    // libNtve_gf_SetDialogItemText(gv_5C4043F8.lv_AD040151[2], (FixedToText(gv_9CB902A4[currentRemotingPlayer][gv_15A72892.lv_0B7B7C1E], 2) + StringExternal("Param/Value/6B419391")), refractTargetPlayerGroup);
    //法抗
    libNtve_gf_SetDialogItemText(gv_5C4043F8.lv_AD040151[3], (FixedToText(gv_9CB902A4[currentRemotingPlayer][gv_15A72892.lv_4EF6DA1D], 2) + StringExternal("Param/Value/089CE3E2")), refractTargetPlayerGroup);
    //攻速
    libNtve_gf_SetDialogItemText(gv_5C4043F8.lv_AD040151[4], FixedToText(gv_9CB902A4[currentRemotingPlayer][gv_15A72892.lv_5F19A6B6], 2), refractTargetPlayerGroup);
    //移速 显示有问题
    // libNtve_gf_SetDialogItemText(gv_5C4043F8.lv_AD040151[5], FixedToText(gv_9CB902A4[currentRemotingPlayer][gv_15A72892.lv_368F8749], 2), refractTargetPlayerGroup);
    //射程
    libNtve_gf_SetDialogItemText(gv_5C4043F8.lv_AD040151[6], FixedToText(UnitWeaponRange(gv_71C054E5[currentRemotingPlayer], 1), 2), refractTargetPlayerGroup);
    //暴击
    libNtve_gf_SetDialogItemText(gv_5C4043F8.lv_AD040151[7], (FixedToText(gv_9CB902A4[currentRemotingPlayer][gv_15A72892.lv_F549A9A2], 0) + StringExternal("Param/Value/1800D7A0")), refractTargetPlayerGroup);
    //冷却
    libNtve_gf_SetDialogItemText(gv_5C4043F8.lv_AD040151[8], (FixedToText(gv_9CB902A4[currentRemotingPlayer][gv_15A72892.lv_513A585F], 0) + StringExternal("Param/Value/C7314030")), refractTargetPlayerGroup);

    // //ap
    // libNtve_gf_SetDialogItemText(gv_5C4043F8.lv_AD040151[1], FixedToText(gv_9CB902A4[currentRemotingPlayer][gv_15A72892.lv_89BFC1C4], 2), refractTargetPlayerGroup);
    // //物抗
    libNtve_gf_SetDialogItemText(gv_5C4043F8.lv_AD040151[2], (FixedToText(UnitGetPropertyFixed(gv_71C054E5[currentRemotingPlayer],c_unitPropLifeArmor,true), 2) + StringExternal("Param/Value/6B419391")), refractTargetPlayerGroup);
    // //法抗
    // libNtve_gf_SetDialogItemText(gv_5C4043F8.lv_AD040151[3], (FixedToText(UnitGetPropertyFixed(gv_71C054E5[currentRemotingPlayer],c_unitPropEnergyArmor,true), 2) + StringExternal("Param/Value/089CE3E2")), refractTargetPlayerGroup);
    // //攻速
    // libNtve_gf_SetDialogItemText(gv_5C4043F8.lv_AD040151[4], FixedToText(UnitWeaponPeriod(gv_71C054E5[currentRemotingPlayer], 1) , 2), refractTargetPlayerGroup);
    // //移速
    libNtve_gf_SetDialogItemText(gv_5C4043F8.lv_AD040151[5], FixedToText(UnitGetPropertyFixed(gv_71C054E5[currentRemotingPlayer],c_unitPropMovementSpeed,true), 2), refractTargetPlayerGroup);
    // //射程
    // libNtve_gf_SetDialogItemText(gv_5C4043F8.lv_AD040151[6], FixedToText(UnitWeaponRange(gv_71C054E5[currentRemotingPlayer], 1), 2), refractTargetPlayerGroup);
    // //暴击
    // libNtve_gf_SetDialogItemText(gv_5C4043F8.lv_AD040151[7], (FixedToText(gv_9CB902A4[currentRemotingPlayer][gv_15A72892.lv_F549A9A2], 0) + StringExternal("Param/Value/1800D7A0")), refractTargetPlayerGroup);
    // //冷却
    // libNtve_gf_SetDialogItemText(gv_5C4043F8.lv_AD040151[8], (FixedToText(gv_9CB902A4[currentRemotingPlayer][gv_15A72892.lv_513A585F], 0) + StringExternal("Param/Value/C7314030")), refractTargetPlayerGroup);
 
    if (getPlayerHeroId(currentRemotingPlayer) == 7){
        if ((gv_BB156610.lv_0195430E[currentRemotingPlayer][0] == 0))
        {
            //ad
            libNtve_gf_SetDialogItemText(gv_5C4043F8.lv_AD040151[gv_5239340F.lv_3B4D4295], FixedToText(UnitWeaponDamage(gv_71C054E5[currentRemotingPlayer], 1, c_unitAttributeHeroic, false), 2), refractTargetPlayerGroup);
        }
        else
        {   
            libNtve_gf_SetDialogItemText(gv_5C4043F8.lv_AD040151[gv_5239340F.lv_3B4D4295], FixedToText(UnitWeaponDamage(gv_71C054E5[currentRemotingPlayer], 2, c_unitAttributeHeroic, false), 2), refractTargetPlayerGroup);
        }
    }
    
    //爱丽丝攻击力显示问题
    else if (getPlayerHeroId(currentRemotingPlayer) == 8){
        libNtve_gf_SetDialogItemText(gv_5C4043F8.lv_AD040151[gv_5239340F.lv_3B4D4295], FixedToText(gv_9CB902A4[currentRemotingPlayer][gv_B48492BD[3]], 2), refractTargetPlayerGroup);
    }
    else{
        libNtve_gf_SetDialogItemText(gv_5C4043F8.lv_AD040151[gv_5239340F.lv_3B4D4295], FixedToText(UnitWeaponDamage(gv_71C054E5[currentRemotingPlayer], 1, c_unitAttributeHeroic, false), 2), refractTargetPlayerGroup);
    }

    //更新属性加点UI
    IntLoopBegin(0,14);
    while(!IntLoopDone()){
        libNtve_gf_SetDialogItemText(gv_F4E2C4A0[2][IntLoopCurrent()], 
                    IntToText(gv_60E73511[currentRemotingPlayer][IntLoopCurrent()]), refractTargetPlayerGroup);
        IntLoopStep();
    }
    IntLoopEnd();

    //更新英雄头像
    libNtve_gf_SetDialogItemImage(gv_5C4043F8.lv_D11CB209, (("character\\interface\\face\\interface_face_" 
        + IntToString(getPlayerHeroId(currentRemotingPlayer)) + ".dds")), refractTargetPlayerGroup);
    libNtve_gf_SetDialogItemImage(gv_5C4043F8.lv_A9C8BA19, "GamesUis\\frame_mp_bar_frame.dds", refractTargetPlayerGroup);
    libNtve_gf_SetDialogItemImage(gv_5C4043F8.lv_472F835E, "GamesUis\\frame_mp_bar_image.dds", refractTargetPlayerGroup);
    //小头像
    libNtve_gf_SetDialogItemImage(gv_169C778B[0], gv_AA1BDB6C[getPlayerHeroId(currentRemotingPlayer)], refractTargetPlayerGroup);
    libNtve_gf_SetDialogItemText(gv_169C778B[1], UnitTypeGetName(UnitGetType(gv_71C054E5[currentRemotingPlayer])), refractTargetPlayerGroup);
    //等级显示
    libNtve_gf_SetDialogItemText(gv_5C4043F8.lv_75EF4F32, (IntToText(gv_893C301B[currentRemotingPlayer]) +
        StringExternal("Param/Value/E919CF14")), refractTargetPlayerGroup);
    //更新状态条
    updateStatusBar(PlayerGroupPlayer(refractTargetPlayerGroup,1),getPlayerHeroUnit(currentRemotingPlayer));
    //更新天赋显示
    updateTalentDisplay(currentRemotingPlayer,refractTargetPlayerGroup);
}
