//GongSun_ink 2022

//获得玩家英雄的dbHeroID
int getPlayerHeroId(int playerId){
    return gv_131E8983[playerId];
}
//获得玩家的英雄单位
unit getPlayerHeroUnit(int playerId){
    return gv_71C054E5[playerId];
}
//--------------------------------------------------Test Mode-----------------------------------------------------

//获得玩家当前选中的单位
unit getTestPlayerCurrentSelectedUnit(){
    return DataTableGetUnit(true,"heroselected");
}
//设置玩家选中的单位
void setTestPlayerCurrentSelectedUnit(unit inUnit){
    DataTableSetUnit(true,"heroselected",inUnit);
}
//获得上一个选择的英雄
int getHeroLastSelected(){
    return DataTableGetInt(true,"heroId");
}
void setHeroLastSelected(int heroId){
    DataTableSetInt(true,"heroId",heroId);
}
//获得上一个选择的玩家
int getPlayerLastPicked(){
    return DataTableGetInt(true,"player");
}
void setPlayerLastPicked(int player){
    DataTableSetInt(true,"player",player);
}

void gameSoundPlayer(int type){
    if (type == v_additionalSelect){
        SoundPlay(SoundLink("sounduistarclick",-1),testModePlayerGroup,100.0,0.0);
    }
    else if (type == v_heroSelect){
        SoundPlay(SoundLink("sounduistar12",-1),testModePlayerGroup,100.0,0.0);
    }
    else if (type == v_roundInit){
        SoundPlay(SoundLink("UI_ConsoleIn_Prot2", -1), PlayerGroupAll(), 100.0, 0.0);
    }
}

int getHeroIdByUnit(unit inUnit){
    return StringToInt(StringSub(UnitGetType(inUnit),7,8));
}

void debug(string message){
    UIDisplayMessage(testModePlayerGroup,c_messageAreaSubtitle,StringToText("debug--"+message));
}

string damageDisplayerKey(string unittag, int suffix){
    if (suffix < 6){
        return damageDisplayerPreFix + unittag + IntToString(suffix);
    }
    else {
        return damageDisplayerPreFixForTextTag + unittag +IntToString(suffix);
    }
}