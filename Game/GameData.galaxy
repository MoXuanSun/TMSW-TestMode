//GongSun_ink 2022

//player = DataPlayer p = UIplayergroup

void talentSelectData(int row, int column, bool select, int player){
    gv_BB156610.lv_48849745[player][column][row] = select;
}

bool isTalentSelected(int row, int column, int player){
    return gv_BB156610.lv_48849745[player][column][row];
}

void abilityPickData(int row, int column, int player){
    gv_BB156610.lv_0195430E[player][column] = row;
}

void storeUpgradeBtn(int player, int index, bool show){
    DataTableSetBool(true,IntToString(player)+"_"+IntToString(index), show);
}

//player可以是playershow的队友或者敌人，这个函数会记录player当前可以点击哪个升级框，并让其对playergroup隐藏
void storeUpgradeBtns(int player){
    int i;
    for (;i < 4; i+=1){
        storeUpgradeBtn(player,i, DialogControlIsVisible(gv_99F9B79B[i],player));
    }
}

//player可以是playershow的队友或者敌人，这个函数会读取player当前可以点击哪个升级框，并让其对playergroup隐藏
void restoreUpgradeBtns(int player, playergroup p){
    int i;
    for (;i<4;i+=1){
        upgradeBtnShow(i,DataTableGetBool(true,IntToString(player)+"_"+IntToString(i)),p);
        upgradeBtnEnable(i,DataTableGetBool(true,IntToString(player)+"_"+IntToString(i)),p);
    }
}

void makeAbilityUpgrade(int player){

    int index;
    int[4] intervalLevels;
    int[4] levelsNeed;
    bool flag;

    for (; index < 4; index += 1)
    {
        if ((gv_385F7DDF[player].lv_938D9C7F[(index + 1)][gv_BB156610.lv_0195430E[player][(index + 1)]] == 6))
        //技能最大等级6
        {
            intervalLevels[index] = 0;
            levelsNeed[index] = 1;
        }
        else if ((gv_385F7DDF[player].lv_938D9C7F[(index + 1)][gv_BB156610.lv_0195430E[player][(index + 1)]] == 5))
        //技能最大等级5
        {
            intervalLevels[index] = 3;
            levelsNeed[index] = 4;
        }
        else if ((gv_385F7DDF[player].lv_938D9C7F[(index + 1)][gv_BB156610.lv_0195430E[player][(index + 1)]] == 4))
        //技能最大等级4
        {
            intervalLevels[index] = 4;
            levelsNeed[index] = 8;
        }
        else if ((gv_385F7DDF[player].lv_938D9C7F[(index + 1)][gv_BB156610.lv_0195430E[player][(index + 1)]] == 3))
        //技能最大等级3
        {
            intervalLevels[index] = 5;
            levelsNeed[index] = 13;
        }    
        //1.判断玩家英雄的技能等级是否小于其最大等级
        //2.玩家等级-玩家上一次升级该技能的等级 每隔n级可以升级该技能
        //3.判断玩家等级是否大于技能学习所需等级
        if ((gv_D0B36B8F[player][(index + 1)] < 
            gv_385F7DDF[player].lv_938D9C7F[(index + 1)][gv_BB156610.lv_0195430E[player][(index + 1)]]) 
        && ((gv_893C301B[player] - gv_203166CD[player][index]) >= intervalLevels[index]) 
        && (gv_893C301B[player] >= levelsNeed[index])){
            flag = true;
            gv_6E454E1F[player] += 1;
            //保存升级按钮
            storeUpgradeBtn(player,index,true);
    
            //除1级外 更新tooptip
            if ((gv_893C301B[player] == 1))
            {
            }
            else
            {
                gf_87B66828(player, index);
            }
            
        }
    }
    // 如果没有技能可以升级 重置升级点数 bug：如果升级过快，前面的技能还没有加点，后面的等级如果没有技能可以提升时则会导致技能点归零 出现bug
    if (!flag)
    {
        gv_63B35897[player] = 0;
    }
} 

void setStatStrsforPlayer(int player){

    string[2][16] lv_B3606C7F;
    string[2][16] lv_E1FEB3A7;
    string[2][16] lv_D280BB95;
    string[2][16] lv_99015105;

    string[16] lv_96618FF6;
  
    string[16] lv_3E40DCEF;

    lv_B3606C7F[0][0] = "dbup_g_stat_str_012";
    lv_B3606C7F[0][1] = "dbup_g_stat_str_06";
    lv_B3606C7F[0][2] = "dbup_g_stat_str_11";
    lv_B3606C7F[0][3] = "dbup_g_stat_str_16";
    lv_B3606C7F[0][4] = "dbup_g_stat_str_21";
    lv_B3606C7F[0][5] = "dbup_g_stat_str_26";
    lv_B3606C7F[0][6] = "dbup_g_stat_str_31";
    lv_B3606C7F[0][7] = "dbup_g_stat_str_36";
    lv_B3606C7F[0][8] = "dbup_g_stat_str_41";
    lv_B3606C7F[0][9] = "dbup_g_stat_str_46";
    lv_B3606C7F[1][0] = "dbup_g_stat_int_01";
    lv_B3606C7F[1][1] = "dbup_g_stat_int_06";
    lv_B3606C7F[1][2] = "dbup_g_stat_int_11";
    lv_B3606C7F[1][3] = "dbup_g_stat_int_16";
    lv_B3606C7F[1][4] = "dbup_g_stat_int_21";
    lv_B3606C7F[1][5] = "dbup_g_stat_int_26";
    lv_B3606C7F[1][6] = "dbup_g_stat_int_31";
    lv_B3606C7F[1][7] = "dbup_g_stat_int_36";
    lv_B3606C7F[1][8] = "dbup_g_stat_int_41";
    lv_B3606C7F[1][9] = "dbup_g_stat_int_46";
    lv_E1FEB3A7[0][0] = "dbup_f_stat_str_01";
    lv_E1FEB3A7[0][1] = "dbup_f_stat_str_06";
    lv_E1FEB3A7[0][2] = "dbup_f_stat_str_11";
    lv_E1FEB3A7[0][3] = "dbup_f_stat_str_16";
    lv_E1FEB3A7[0][4] = "dbup_f_stat_str_21";
    lv_E1FEB3A7[0][5] = "dbup_f_stat_str_26";
    lv_E1FEB3A7[0][6] = "dbup_f_stat_str_31";
    lv_E1FEB3A7[0][7] = "dbup_f_stat_str_36";
    lv_E1FEB3A7[0][8] = "dbup_f_stat_str_41";
    lv_E1FEB3A7[0][9] = "dbup_f_stat_str_46";
    lv_E1FEB3A7[1][0] = "dbup_f_stat_int_01";
    lv_E1FEB3A7[1][1] = "dbup_f_stat_int_06";
    lv_E1FEB3A7[1][2] = "dbup_f_stat_int_11";
    lv_E1FEB3A7[1][3] = "dbup_f_stat_int_16";
    lv_E1FEB3A7[1][4] = "dbup_f_stat_int_21";
    lv_E1FEB3A7[1][5] = "dbup_f_stat_int_26";
    lv_E1FEB3A7[1][6] = "dbup_f_stat_int_31";
    lv_E1FEB3A7[1][7] = "dbup_f_stat_int_36";
    lv_E1FEB3A7[1][8] = "dbup_f_stat_int_41";
    lv_E1FEB3A7[1][9] = "dbup_f_stat_int_46";
    lv_D280BB95[1][0] = "dbup_f_stat_int_5";
    lv_D280BB95[1][1] = "dbup_f_stat_int_062";
    lv_D280BB95[1][2] = "dbup_f_stat_int_112";
    lv_D280BB95[1][3] = "dbup_f_stat_int_162";
    lv_D280BB95[1][4] = "dbup_f_stat_int_212";
    lv_D280BB95[1][5] = "dbup_f_stat_int_262";
    lv_D280BB95[1][6] = "dbup_f_stat_int_312";
    lv_D280BB95[1][7] = "dbup_f_stat_int_362";
    lv_D280BB95[1][8] = "dbup_f_stat_int_412";
    lv_D280BB95[1][9] = "dbup_f_stat_int_462";
    lv_99015105[0][0] = "dbup_f_stat_str_012";
    lv_99015105[0][1] = "dbup_f_stat_str_062";
    lv_99015105[0][2] = "dbup_f_stat_str_112";
    lv_99015105[0][3] = "dbup_f_stat_str_162";
    lv_99015105[0][4] = "dbup_f_stat_str_212";
    lv_99015105[0][5] = "dbup_f_stat_str_262";
    lv_99015105[0][6] = "dbup_f_stat_str_312";
    lv_99015105[0][7] = "dbup_f_stat_str_362";
    lv_99015105[0][8] = "dbup_f_stat_str_412";
    lv_99015105[0][9] = "dbup_f_stat_str_462";
    lv_99015105[1][0] = "dbup_f_stat_int_52";
    lv_99015105[1][1] = "dbup_f_stat_int_0622";
    lv_99015105[1][2] = "dbup_f_stat_int_1122";
    lv_99015105[1][3] = "dbup_f_stat_int_1622";
    lv_99015105[1][4] = "dbup_f_stat_int_2122";
    lv_99015105[1][5] = "dbup_f_stat_int_2622";
    lv_99015105[1][6] = "dbup_f_stat_int_3122";
    lv_99015105[1][7] = "dbup_f_stat_int_3622";
    lv_99015105[1][8] = "dbup_f_stat_int_4122";
    lv_99015105[1][9] = "dbup_f_stat_int_4622";

    gv_F8080DD9[player][0] = lv_B3606C7F[0][gf_3761C93C(gv_131E8983[player])];
    gv_F8080DD9[player][1] = lv_B3606C7F[1][gf_3761C93C(gv_131E8983[player])];
    gv_47EB06F2[player][0] = lv_E1FEB3A7[0][gf_3761C93C(gv_131E8983[player])];
    gv_47EB06F2[player][1] = lv_E1FEB3A7[1][gf_3761C93C(gv_131E8983[player])];
    gv_454FA4B8[player][1] = lv_D280BB95[1][gf_3761C93C(gv_131E8983[player])];
    gv_85488D42[player][1] = lv_99015105[1][gf_3761C93C(gv_131E8983[player])];
    gv_85488D42[player][0] = lv_99015105[0][gf_3761C93C(gv_131E8983[player])];

    lv_3E40DCEF[0] = "dbup_i_cool_01";
    lv_3E40DCEF[1] = "dbup_i_cool_06";
    lv_3E40DCEF[2] = "dbup_i_cool_11";
    lv_3E40DCEF[3] = "dbup_i_cool_16";
    lv_3E40DCEF[4] = "dbup_i_cool_21";
    lv_3E40DCEF[5] = "dbup_i_cool_26";
    lv_3E40DCEF[6] = "dbup_i_cool_31";
    lv_3E40DCEF[7] = "dbup_i_cool_36";
    lv_3E40DCEF[8] = "dbup_i_cool_41";
    lv_3E40DCEF[9] = "dbup_i_cool_46";

    gv_EFE7171B[player] = lv_3E40DCEF[gf_3761C93C(gv_131E8983[player])];

    lv_96618FF6[0] = "dbup_e_stat_str_01";
    lv_96618FF6[1] = "dbup_e_stat_str_06";
    lv_96618FF6[2] = "dbup_e_stat_str_11";
    lv_96618FF6[3] = "dbup_e_stat_str_16";
    lv_96618FF6[4] = "dbup_e_stat_str_21";
    lv_96618FF6[5] = "dbup_e_stat_str_26";
    lv_96618FF6[6] = "dbup_e_stat_str_31";
    lv_96618FF6[7] = "dbup_e_stat_str_36";
    lv_96618FF6[8] = "dbup_e_stat_str_41";
    lv_96618FF6[9] = "dbup_e_stat_str_46";

    gv_93D2AA8F[player] = lv_96618FF6[gf_3761C93C(gv_131E8983[player])];
}

void initDataForPlayer(){
    
    //初始化信息

    //加点的需要的钱、各种stat值
    TriggerExecute(gt_C7E3A592, false, true);
    //属性上限
    TriggerExecute(gt_84BE2900, false, true);
    TriggerExecute(gt_53B638C3, false, true);
    TriggerExecute(gt_B15050B7, false, true);
    //技能数据
    TriggerExecute(gt_F00C0934, false, true);
    TriggerExecute(gt_64FBF599, false, true);
    TriggerExecute(gt_27ED109B, false, true);
    TriggerExecute(gt_449346FA, false, true);
    TriggerExecute(gt_936A4CD0, false, true);
    TriggerExecute(gt_4763C627, false, true);
    TriggerExecute(gt_7B46B8A2, false, true);
    TriggerExecute(gt_E09377E6, false, true);
    TriggerExecute(gt_21AB3C1E, false, true);
  
    setStatStrsforPlayer(getPlayerLastPicked());
}

void setPlayerPropPoints(int player, int propType, int opt, int value){
    
}