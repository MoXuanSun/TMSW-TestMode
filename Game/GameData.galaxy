//GongSun_ink 2022

//天赋选择
void talentSelectData(int row, int column, bool select, int player){
    gv_BB156610.lv_48849745[player][column][row] = select;
}

bool isTalentSelected(int row, int column, int player){
    return gv_BB156610.lv_48849745[player][column][row];
}

void abilitySelectData(int row, int column, int player){
    gv_BB156610.lv_0195430E[player][column] = row;
}

bool isAbilitySelected(int row, int column, int player){
    if (gv_BB156610.lv_0195430E[player][column] == row){
        return true;
    }
    else{
        return false;
    }
}

void additionalAbilitySelectData(int row, int column, int player){
    gv_BB156610.lv_B91E5FDF[player][row] = column;
}

bool isAdditionalAbilitySelected(int row, int column, int player){
    if (gv_BB156610.lv_B91E5FDF[player][row] == column){
        return true;
    }
    else{
        return false;
    }
}

void initPropAddData(int row, int player){
    gv_BB156610.lv_ADADDA87[player] -= 1;
    gv_BB156610.lv_D98ECB52[player][row] += 1;
}

void storeUpgradeBtn(int player, int index, bool show){
    DataTableSetBool(true,IntToString(player)+"_"+IntToString(index), show);
}

void storeUpgradeBtns(int player){
    IntLoopBegin(0,3);
    while(!IntLoopDone()){
        storeUpgradeBtn(player,IntLoopCurrent(),DialogControlIsVisible(gv_99F9B79B[IntLoopCurrent()],player));
        IntLoopStep();
    }
    IntLoopEnd();
}

void restoreUpgradeBtns(int player, playergroup p){
    IntLoopBegin(0,3);
    while(!IntLoopDone()){
        upgradeBtnShow(IntLoopCurrent(),DataTableGetBool(true,IntToString(player)+"_"+IntToString(IntLoopCurrent())),p);
        upgradeBtnEnable(IntLoopCurrent(),DataTableGetBool(true,IntToString(player)+"_"+IntToString(IntLoopCurrent())),p);
        IntLoopStep();
    }
    IntLoopEnd();
}

void fetchArmorUpgrade(int player){
    string[2][10] lv_272FC741;

    int temp;
    int type;
    int armorType;

    lv_272FC741[0][0] = "dbup_armor_spec";
    lv_272FC741[0][1] = "dbup_armor_spec2";
    lv_272FC741[0][2] = "dbup_armor_spec3";
    lv_272FC741[0][3] = "dbup_armor_spec4";
    lv_272FC741[0][4] = "dbup_armor_spec5";
    lv_272FC741[0][5] = "dbup_armor_spec6";
    lv_272FC741[0][6] = "dbup_armor_spec7";
    lv_272FC741[0][7] = "dbup_armor_spec8";
    lv_272FC741[0][8] = "dbup_armor_spec9";
    lv_272FC741[0][9] = "dbup_armor_spec10";
    lv_272FC741[1][0] = "dbup_armor2_spec";
    lv_272FC741[1][1] = "dbup_armor2_spec2";
    lv_272FC741[1][2] = "dbup_armor2_spec3";
    lv_272FC741[1][3] = "dbup_armor2_spec4";
    lv_272FC741[1][4] = "dbup_armor2_spec5";
    lv_272FC741[1][5] = "dbup_armor2_spec6";
    lv_272FC741[1][6] = "dbup_armor2_spec7";
    lv_272FC741[1][7] = "dbup_armor2_spec8";
    lv_272FC741[1][8] = "dbup_armor2_spec9";
    lv_272FC741[1][9] = "dbup_armor2_spec10";

    for (; armorType < 2 ; armorType += 1){
        if (armorType == 0)
        {
            type = 4;
        }
        else
        { 
            type = 5;
        }        

        //先把科技都重置回来
        while(gv_D877D515[player][armorType] > DataTableGetInt(true,"playerarmor"+IntToString(type)+"-D"+IntToString(player))){
            libNtve_gf_SetUpgradeLevelForPlayer(player, lv_272FC741[armorType][gv_D877D515[player][armorType]], 0);
            gv_D877D515[player][armorType] -= 1;
            DataTableSetFixed(true,"playerarmor"+IntToString(type)+IntToString(player),
                DataTableGetFixed(true,"playerarmor"+IntToString(type)+IntToString(player)) - gv_D877D515[player][armorType] * 100);
        }

        gv_9CB902A4[IntLoopCurrent()][type] = DataTableGetFixed(true,"playerarmor"+IntToString(type)+IntToString(player)) / 10;


        libNtve_gf_SetUpgradeLevelForPlayer(player, lv_272FC741[armorType][gv_D877D515[player][armorType]], 
            FixedToInt(DataTableGetFixed(true,"playerarmor"+IntToString(type)+IntToString(player))) % 100);

        //  loggerD(IntToString(FixedToInt(DataTableGetFixed(true,"playerarmor"+IntToString(type)+IntToString(player)))));
        //  loggerD(IntToString(FixedToInt(gv_9CB902A4[IntLoopCurrent()][type])));
        //  loggerD("------------------------");
        
    }

}

void initDataForPlayer(){
    
    int i;
    //初始化信息
    //加点的需要的钱、各种stat值
    TriggerExecute(gt_C7E3A592, false, true);
    TriggerExecute(gt_D16F0461, false, true);

    //不重写这些数据，为了防止变动，作者把数据都直接写在函数里面了

    //gv_2A156F88 = 1 在init中被设置 判断初始护甲升级让属性数组自增 

    gv_2A156F88 = 0;
    IntLoopBegin(1,10);
    while(!IntLoopDone()){
        if (IntLoopCurrent() == getPlayerLastPicked() || getPlayerHeroId(IntLoopCurrent()) == 0){
            IntLoopStep();
            continue;
        }

        //这些只是数值有问题
        //ap 没有初始带ap的英雄
        // DataTableSetFixed(true,"playerProp"+IntToString(3)+IntToString(getPlayerLastPicked()),gv_9CB902A4[IntLoopCurrent()][3]);
        //攻速
        DataTableSetFixed(true,"playerProp"+IntToString(6)+IntToString(getPlayerLastPicked()),gv_9CB902A4[IntLoopCurrent()][6]);
        //法抗
        DataTableSetFixed(true,"playerProp"+IntToString(8)+IntToString(getPlayerLastPicked()),gv_9CB902A4[IntLoopCurrent()][8]);
        //冷却 初始也没有冷却
        // DataTableSetFixed(true,"playerProp"+IntToString(9)+IntToString(getPlayerLastPicked()),gv_9CB902A4[IntLoopCurrent()][9]);

        for (i = 0 ; i < 8 ; i += 1){
            DataTableSetFixed(true,"playerarmor4"+IntToString(IntLoopCurrent()),gv_9CB902A4[IntLoopCurrent()][4] * 10);
            DataTableSetInt(true,"playerarmor4-D"+IntToString(IntLoopCurrent()),gv_D877D515[IntLoopCurrent()][0]);
            DataTableSetFixed(true,"playerarmor5"+IntToString(IntLoopCurrent()),gv_9CB902A4[IntLoopCurrent()][5] * 10);
            DataTableSetInt(true,"playerarmor5-D"+IntToString(IntLoopCurrent()),gv_D877D515[IntLoopCurrent()][1]);
        }
       
        
        IntLoopStep();
    }
    IntLoopEnd();
 
    //属性上限、初始护甲
    TriggerExecute(gt_84BE2900, false, true);
    TriggerExecute(gt_53B638C3, false, true);
    TriggerExecute(gt_B15050B7, false, true);

    IntLoopBegin(1,10);
    while(!IntLoopDone()){
        if (IntLoopCurrent() == getPlayerLastPicked() || getPlayerHeroId(IntLoopCurrent()) == 0){
            IntLoopStep();
            continue;
        }

        // gv_9CB902A4[IntLoopCurrent()][3] = DataTableGetFixed(true,"playerProp"+IntToString(3)+IntToString(getPlayerLastPicked()));
        gv_9CB902A4[IntLoopCurrent()][6] = DataTableGetFixed(true,"playerProp"+IntToString(6)+IntToString(getPlayerLastPicked()));
        gv_9CB902A4[IntLoopCurrent()][8] = DataTableGetFixed(true,"playerProp"+IntToString(8)+IntToString(getPlayerLastPicked()));
        // gv_9CB902A4[IntLoopCurrent()][9] = DataTableGetFixed(true,"playerProp"+IntToString(9)+IntToString(getPlayerLastPicked()));

        debug(IntToString(IntLoopCurrent()));
        fetchArmorUpgrade(IntLoopCurrent());
        IntLoopStep();
    }
    IntLoopEnd();
    gv_2A156F88 = 1;
    //技能数据
    TriggerExecute(gt_F00C0934, false, true);
    TriggerExecute(gt_64FBF599, false, true);
    TriggerExecute(gt_27ED109B, false, true);
    TriggerExecute(gt_449346FA, false, true);
    TriggerExecute(gt_936A4CD0, false, true);
    TriggerExecute(gt_4763C627, false, true);
    TriggerExecute(gt_7B46B8A2, false, true);
    TriggerExecute(gt_E09377E6, false, true);
    TriggerExecute(gt_21AB3C1E, false, true);

    //血量上限 fixed->int 
    gf_5B3578B1();    
    //更新远程英雄为true
    gf_5B3968D5();

}
//用于非0回合创建新英雄时无回合升级的问题
void fetchPlayerToCurrentRound(int player){
    int i;
    int atkRangeCanUpgrade;

    if (gv_8D37EDF7 % 2 == 1)
    {
        //加视野
        TechTreeUpgradeAddLevel(player, "dbup_bam",
            (TechTreeUpgradeCount(player, "dbup_bam", c_techCountCompleteOnly) * -1));
        UnitBehaviorRemove(gv_71C054E5[player], "dbdo09_1_0t_17", 1);
        if ((gv_131E8983[player] == 20) && (gv_BB156610.lv_0195430E[player][0] == 0))
        {
            UnitBehaviorRemove(gv_71C054E5[player], "dbdo20_1_0t2", 1);
        }
        if ((gv_131E8983[player] == 29) && (gv_BB156610.lv_0195430E[player][3] == 0))
        {
            TechTreeUpgradeAddLevel(player, "dhup29_1_3e", (TechTreeUpgradeCount(player, "dhup29_1_3e", c_techCountCompleteOnly) * -1));
        }
    }
    else
    {
        //夜晚减视野
        TechTreeUpgradeAddLevel(player, "dbup_bam", 1);
        if ((gv_131E8983[player] == 9) && (gv_BB156610.lv_0195430E[player][4] == 0) && (gv_D0B36B8F[player][4] >= 1))
        {
            UnitBehaviorAdd(gv_71C054E5[player], "dbdo09_1_0t_17", gv_71C054E5[player], 1);
        }
        if ((gv_131E8983[player] == 20) && (gv_BB156610.lv_0195430E[player][0] == 0))
        {
            UnitBehaviorAdd(gv_71C054E5[player], "dbdo20_1_0t2", gv_71C054E5[player], 1);
        }
        if ((gv_131E8983[player] == 29) && (gv_BB156610.lv_0195430E[player][3] == 0))
        {
            TechTreeUpgradeAddLevel(player, "dhup29_1_3e", gv_D0B36B8F[player][3]);
        }
    }

    for (; i <= gv_8D37EDF7;  i += 1){
        gf_17113C81(gv_71C054E5[player]);
        gf_1DA6D503(gv_71C054E5[player]);

        gv_EDC9A72C[player] = 0;
        gv_55A8AB50[player] += 1;
        gv_48E7CC05[gv_9EEEA78D[player]] += 1;

        if ((gv_FDDB3651[player] >= 1)){
            if ((gv_FDDB3651[player] == 1))
            {
                UnitCreateEffectUnit(gv_71C054E5[player], "dbhy_00_06_7", gv_71C054E5[player]);
            }
            else if ((gv_FDDB3651[player] == 2))
            {
                UnitCreateEffectUnit(gv_71C054E5[player], "dbhy_00_06_6", gv_71C054E5[player]);
            }
            else if ((gv_FDDB3651[player] == 3))
            {
                UnitCreateEffectUnit(gv_71C054E5[player], "dbhy_00_24", gv_71C054E5[player]);
            }
            else if ((gv_FDDB3651[player] == 4))
            {
                UnitCreateEffectUnit(gv_71C054E5[player], "dbhy_00_200", gv_71C054E5[player]);
            }
            else if ((gv_FDDB3651[player] == 5))
            {
                UnitCreateEffectUnit(gv_71C054E5[player], "dbhy_00_25", gv_71C054E5[player]);
            }
            gv_FDDB3651[player] = 0;
        }

        if (i > 1 && i % 3 == 1){
            //射程可升级
            if (((i == 7) || (i == 10) || (i == 13) || (i == 16) || (i == 19))){
                if (i == 7)
                {
                    atkRangeCanUpgrade = 1;
                }
                else if (i == 10)
                {
                    atkRangeCanUpgrade = 2;
                }  
                else if (i == 13)
                {
                    atkRangeCanUpgrade = 3;
                }
                else if (i == 16)
                {
                    atkRangeCanUpgrade = 4;
                }
                else if (i == 19)
                {
                    atkRangeCanUpgrade = 5;
                }
                else
                {
                }
                //射程上限
                gv_D79965A1[1][10] = atkRangeCanUpgrade;
                //更新属性加点UI
               
            }
            TechTreeUpgradeAddLevel(player, "roundupgradeBonus", 1);     
        }

        if(i == 23){
            TechTreeUpgradeAddLevel(player, "roundupgradeFinal", 1);
        }

        //经验值诈骗
        if ((i != 0) || (i != 1) || (i != 2)){
            PlayerCreateEffectUnit(player, "dbhy_00_0622322", gv_71C054E5[player]);
        }
    }
}
//全局回合推进
void nextRoundGlobal(){
    int atkRangeCanUpgrade;
    bool isDay;

    //膜 只要拿到膜 

    unitgroup shieldUnitGroup = UnitGroup("PickupEnergy25", 0, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
    
    UnitGroupLoopBegin(shieldUnitGroup);
    while(!UnitGroupLoopDone()){
        UnitRemove(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    
    TechTreeUpgradeAddLevel(0, "dbup_Object_Shiled", 1);

    gv_8D37EDF7 += 1;
    //白天晚上
    if (gv_8D37EDF7 % 2 == 1) {
        GameSetLighting("Char2", 1.4);
        isDay = true;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Button/Tooltip/db_txt_preset_zameText_55"));
        TechTreeUpgradeAddLevel(0, "dbup_bam", (TechTreeUpgradeCount(0, "dbup_bam", c_techCountCompleteOnly) * -1));
    }
    else
    {
        GameSetLighting("IceWorldNight", 1.4);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Button/Tooltip/db_txt_preset_zameText_56"));
        TechTreeUpgradeAddLevel(0, "dbup_bam", 1);
    }

    showMsg(1,"回合"+IntToString(gv_8D37EDF7));

    IntLoopBegin(1,10);
    while(!IntLoopDone()){
        //如果该玩家没有英雄则跳过
        if (getPlayerHeroUnit(IntLoopCurrent()) == null){
            IntLoopStep();
            continue;
        }
        //移除拿到膜的行为ShieldsObjectTouhou
        UnitBehaviorRemove(getPlayerHeroUnit(IntLoopCurrent()),"ShieldsObjectTouhou",1);

        if (isDay){
            //加视野
            TechTreeUpgradeAddLevel(IntLoopCurrent(), "dbup_bam",
                (TechTreeUpgradeCount(IntLoopCurrent(), "dbup_bam", c_techCountCompleteOnly) * -1));
            UnitBehaviorRemove(gv_71C054E5[IntLoopCurrent()], "dbdo09_1_0t_17", 1);
            if ((gv_131E8983[IntLoopCurrent()] == 20) && (gv_BB156610.lv_0195430E[IntLoopCurrent()][0] == 0))
            {
                UnitBehaviorRemove(gv_71C054E5[IntLoopCurrent()], "dbdo20_1_0t2", 1);
            }
            if ((gv_131E8983[IntLoopCurrent()] == 29) && (gv_BB156610.lv_0195430E[IntLoopCurrent()][3] == 0))
            {
                TechTreeUpgradeAddLevel(IntLoopCurrent(), "dhup29_1_3e", (TechTreeUpgradeCount(IntLoopCurrent(), "dhup29_1_3e", c_techCountCompleteOnly) * -1));
            }
        }
        else{
            //夜晚减视野
            TechTreeUpgradeAddLevel(IntLoopCurrent(), "dbup_bam", 1);
            if ((gv_131E8983[IntLoopCurrent()] == 9) && (gv_BB156610.lv_0195430E[IntLoopCurrent()][4] == 0) && (gv_D0B36B8F[IntLoopCurrent()][4] >= 1))
            {
                UnitBehaviorAdd(gv_71C054E5[IntLoopCurrent()], "dbdo09_1_0t_17", gv_71C054E5[IntLoopCurrent()], 1);
            }
            if ((gv_131E8983[IntLoopCurrent()] == 20) && (gv_BB156610.lv_0195430E[IntLoopCurrent()][0] == 0))
            {
                UnitBehaviorAdd(gv_71C054E5[IntLoopCurrent()], "dbdo20_1_0t2", gv_71C054E5[IntLoopCurrent()], 1);
            }
            if ((gv_131E8983[IntLoopCurrent()] == 29) && (gv_BB156610.lv_0195430E[IntLoopCurrent()][3] == 0))
            {
                TechTreeUpgradeAddLevel(IntLoopCurrent(), "dhup29_1_3e", gv_D0B36B8F[IntLoopCurrent()][3]);
            }
        }
        //rountinitsss 空效果 没有执行任何动作 不清楚用途
        UnitCreateEffectUnit(gv_71C054E5[IntLoopCurrent()], "rountinitsss", gv_71C054E5[IntLoopCurrent()]);
        //回合升级
        gf_17113C81(gv_71C054E5[IntLoopCurrent()]);
        gf_1DA6D503(gv_71C054E5[IntLoopCurrent()]);
        
        gv_EDC9A72C[IntLoopCurrent()] = 0;
        gv_55A8AB50[IntLoopCurrent()] += 1;
        gv_48E7CC05[gv_9EEEA78D[IntLoopCurrent()]] += 1;
    
    
        //回合经验值
        if ((gv_FDDB3651[IntLoopCurrent()] >= 1)){
            if ((gv_FDDB3651[IntLoopCurrent()] == 1))
            {
                UnitCreateEffectUnit(gv_71C054E5[IntLoopCurrent()], "dbhy_00_06_7", gv_71C054E5[IntLoopCurrent()]);
            }
            else if ((gv_FDDB3651[IntLoopCurrent()] == 2))
            {
                UnitCreateEffectUnit(gv_71C054E5[IntLoopCurrent()], "dbhy_00_06_6", gv_71C054E5[IntLoopCurrent()]);
            }
            else if ((gv_FDDB3651[IntLoopCurrent()] == 3))
            {
                UnitCreateEffectUnit(gv_71C054E5[IntLoopCurrent()], "dbhy_00_24", gv_71C054E5[IntLoopCurrent()]);
            }
            else if ((gv_FDDB3651[IntLoopCurrent()] == 4))
            {
                UnitCreateEffectUnit(gv_71C054E5[IntLoopCurrent()], "dbhy_00_200", gv_71C054E5[IntLoopCurrent()]);
            }
            else if ((gv_FDDB3651[IntLoopCurrent()] == 5))
            {
                UnitCreateEffectUnit(gv_71C054E5[IntLoopCurrent()], "dbhy_00_25", gv_71C054E5[IntLoopCurrent()]);
            }
            gv_FDDB3651[IntLoopCurrent()] = 0;
        }
    
        gv_BB284D6D = 1;
       
        if (gv_8D37EDF7 > 1 && (gv_8D37EDF7 % 3) == 1){
            //射程可升级
            if (((gv_8D37EDF7 == 7) || (gv_8D37EDF7 == 10) || (gv_8D37EDF7 == 13) || (gv_8D37EDF7 == 16) || (gv_8D37EDF7 == 19))){
                if (gv_8D37EDF7 == 7)
                {
                    atkRangeCanUpgrade = 1;
                }
                else if (gv_8D37EDF7 == 10)
                {
                    atkRangeCanUpgrade = 2;
                }  
                else if (gv_8D37EDF7 == 13)
                {
                    atkRangeCanUpgrade = 3;
                }
                else if (gv_8D37EDF7 == 16)
                {
                    atkRangeCanUpgrade = 4;
                }
                else if (gv_8D37EDF7 == 19)
                {
                    atkRangeCanUpgrade = 5;
                }
                gv_D79965A1[1][10] = atkRangeCanUpgrade;
            }
            TechTreeUpgradeAddLevel(IntLoopCurrent(), "roundupgradeBonus", 1);
        }
        //最终回合 -- 修改为回合数==23
        if(gv_8D37EDF7 == 23){
            gv_3CD651F7 = 1;
            TechTreeUpgradeAddLevel(IntLoopCurrent(), "roundupgradeFinal", 1);
        }
        //经验值诈骗
        if (((gv_8D37EDF7 != 0) || (gv_8D37EDF7 != 1) || (gv_8D37EDF7 != 2))){
            PlayerCreateEffectUnit(IntLoopCurrent(), "dbhy_00_0622322", gv_71C054E5[IntLoopCurrent()]);
        }
     
        IntLoopStep();
    }
    IntLoopEnd();
    
   
    gv_2B3D2CAD = false;
}

void removeUnitAndReflashPlayer(int player){
    
    string upgradeInfo = DataTableGetString(true,upgradeInfoPrefix+IntToString(player));
    int i;
    int j;
  
    //移除选中的人偶

    if (getDummySelected() != null){
        TextTagDestroy(DataTableGetInt(true,damageDisplayerKey(IntToString(UnitGetTag(getDummySelected())),c_damagedisplayer_texttagLast)));
        TextTagDestroy(DataTableGetInt(true,damageDisplayerKey(IntToString(UnitGetTag(getDummySelected())),c_damagedisplayer_texttagTotal)));
        TextTagDestroy(DataTableGetInt(true,damageDisplayerKey(IntToString(UnitGetTag(getDummySelected())),c_damagedisplayer_texttagDps)));
        UnitRemove(getDummySelected());
        setDummySelected(null);
        return;
    }
    
    UnitXPSetXPForLevel(gv_71C054E5[player],"dbdo_ex",1,0);
    //玩家等级
    gv_893C301B[player] = 1;
    //玩家可用技能点
    gv_63B35897[player] = 0;
    for (i = 0; i < 5; i += 1){
        //玩家英雄对应技能等级
        gv_D0B36B8F[player][i] = 0;       
        if (i < 4){
            storeUpgradeBtn(player,i,false);
            upgradeBtnShow(i,false,testModePlayerGroup);
            //玩家英雄技能上次升级对应的玩家英雄等级
            gv_203166CD[player][i] = 0;
            //判断英雄技能是否学习过
            gv_5DDEB9BD[player][i] = 0;
        }
    }

    gv_55A8AB50[player] -= 1;
    //两边队伍剩余人数
    gv_48E7CC05[gv_9EEEA78D[player]] -= 1;

    for (i = 0 ; i < 5 ; i +=1){
        for (j = 0 ; j < 18 ; j+=1){
            talentSelectData(j,i,false,player);
        }
    }

    for (i = 0 ; i < 5; i += 1){
        abilitySelectData(0,i,player);
    }

    for (i = 0 ; i < 3 ; i += 1){
        additionalAbilitySelectData(i,0,player);
    }

    gv_BB156610.lv_ADADDA87[player] = 8;
    for (i = 0 ; i < 6 ; i += 1){
        gv_BB156610.lv_D98ECB52[player][i] = 0;
    }

    IntLoopBegin(0,14);
    while(!IntLoopDone()){
        gv_60E73511[player][IntLoopCurrent()] = 0;
        gv_9CB902A4[player][IntLoopCurrent()] = 0;
        IntLoopStep();
    }
    IntLoopEnd();

    for (i = 0 ; i < UnitBehaviorCountAll(gv_71C054E5[player]); i += 1){
        UnitBehaviorRemove(gv_71C054E5[player],UnitBehaviorGet(gv_71C054E5[player],i),UnitBehaviorCount(gv_71C054E5[player],UnitBehaviorGet(gv_71C054E5[player],i)));
    }
    
    if (upgradeInfo != null){
        for(i = 1 ; StringWord(upgradeInfo,i) != null ; i += 1){
            libNtve_gf_SetUpgradeLevelForPlayer(player,StringWord(upgradeInfo,i),0);
            // loggerD(StringWord(upgradeInfo,i));
        }
        DataTableSetString(true,upgradeInfoPrefix+IntToString(player),null);
    }

    if (getPlayerHeroId(player) == 8){
        libNtve_gf_ShowHideUnit(gv_E7EDB9D8[player],false);
        libNtve_gf_PauseUnit(gv_E7EDB9D8[player],true);
        UnitKill(gv_E7EDB9D8[player]);
        UnitRemove(gv_E7EDB9D8[player]);
        libNtve_gf_ShowHideUnit(gv_71C054E5[player],false);
        
        UnitSetPosition(gv_71C054E5[player],UnitGetPosition(UnitFromId(1587265046)),false);
        // UnitBehaviorAdd(gv_71C054E5[player],"nodie2",gv_71C054E5[player],1);   
        UnitBehaviorAdd(gv_71C054E5[player],"nodie2res",gv_71C054E5[player],1);   
        libNtve_gf_PauseUnit(gv_71C054E5[player],true);
    }else {
        UnitRemove(gv_71C054E5[player]);
    }

    UnitSelect(gv_71C054E5[player],testModePlayer,false);

    setTestPlayerCurrentSelectedUnit(null);
    gv_71C054E5[player] = null;
    gv_131E8983[player] = 0;

    DialogSetVisible(gv_5C4043F8.lv_B91A282D, testModePlayerGroup, false);
    DialogSetVisible(gv_598EC0B1, testModePlayerGroup, false);
    DialogSetVisible(gv_5C4043F8.lv_8DEC25E2, testModePlayerGroup, false);
    DialogSetVisible(gv_5C4043F8.lv_AF2E051A, testModePlayerGroup, false);    
}

