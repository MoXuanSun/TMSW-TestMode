//GongSun_ink 2022

//player = DataPlayer p = UIplayergroup

void talentSelectData(int row, int column, bool select, int player){
    gv_BB156610.lv_48849745[player][column][row] = select;
}

bool isTalentSelected(int row, int column, int player){
    return gv_BB156610.lv_48849745[player][column][row];
}

void abilityPickData(int row, int column, int player){
    gv_BB156610.lv_0195430E[player][column] = row;
}

void storeUpgradeBtn(int player, int index, bool show){
    DataTableSetBool(true,IntToString(player)+"_"+IntToString(index), show);
}

void storeUpgradeBtns(int player){
    IntLoopBegin(0,3);
    while(!IntLoopDone()){
        storeUpgradeBtn(player,IntLoopCurrent(),DialogControlIsVisible(gv_99F9B79B[IntLoopCurrent()],player));
        // upgradeBtnShow(IntLoopCurrent(),false,PlayerGroupSingle(player));
        IntLoopStep();
    }
    IntLoopEnd();
}

void restoreUpgradeBtns(int player, playergroup p){
    IntLoopBegin(0,3);
    while(!IntLoopDone()){
        upgradeBtnShow(IntLoopCurrent(),DataTableGetBool(true,IntToString(player)+"_"+IntToString(IntLoopCurrent())),p);
        upgradeBtnEnable(IntLoopCurrent(),DataTableGetBool(true,IntToString(player)+"_"+IntToString(IntLoopCurrent())),p);
        IntLoopStep();
    }
    IntLoopEnd();
}

void makeAbilityUpgrade(int player){

    int index;
    int[4] intervalLevels;
    int[4] levelsNeed;
    bool flag;

    for (; index < 4; index += 1)
    {
        if ((gv_385F7DDF[player].lv_938D9C7F[(index + 1)][gv_BB156610.lv_0195430E[player][(index + 1)]] == 6))
        //技能最大等级6
        {
            intervalLevels[index] = 0;
            levelsNeed[index] = 1;
        }
        else if ((gv_385F7DDF[player].lv_938D9C7F[(index + 1)][gv_BB156610.lv_0195430E[player][(index + 1)]] == 5))
        //技能最大等级5
        {
            intervalLevels[index] = 3;
            levelsNeed[index] = 4;
        }
        else if ((gv_385F7DDF[player].lv_938D9C7F[(index + 1)][gv_BB156610.lv_0195430E[player][(index + 1)]] == 4))
        //技能最大等级4
        {
            intervalLevels[index] = 4;
            levelsNeed[index] = 8;
        }
        else if ((gv_385F7DDF[player].lv_938D9C7F[(index + 1)][gv_BB156610.lv_0195430E[player][(index + 1)]] == 3))
        //技能最大等级3
        {
            intervalLevels[index] = 5;
            levelsNeed[index] = 13;
        }    
        //1.判断玩家英雄的技能等级是否小于其最大等级
        //2.玩家等级-玩家上一次升级该技能的等级 每隔n级可以升级该技能
        //3.判断玩家等级是否大于技能学习所需等级
        if ((gv_D0B36B8F[player][(index + 1)] < 
            gv_385F7DDF[player].lv_938D9C7F[(index + 1)][gv_BB156610.lv_0195430E[player][(index + 1)]]) 
        && ((gv_893C301B[player] - gv_203166CD[player][index]) >= intervalLevels[index]) 
        && (gv_893C301B[player] >= levelsNeed[index])){
            flag = true;
            gv_6E454E1F[player] += 1;
            //保存升级按钮
            storeUpgradeBtn(player,index,true);
    
            //除1级外 更新tooptip
            if ((gv_893C301B[player] == 1))
            {
            }
            else
            {
                gf_87B66828(player, index);
            }
            
        }
    }
    // 如果没有技能可以升级 重置升级点数 bug：如果升级过快，前面的技能还没有加点，后面的等级如果没有技能可以提升时则会导致技能点归零 出现bug
    if (!flag)
    {
        gv_63B35897[player] = 0;
    }
} 

void setStatStrsforPlayer(int player){

    string[2][16] lv_B3606C7F;
    string[2][16] lv_E1FEB3A7;
    string[2][16] lv_D280BB95;
    string[2][16] lv_99015105;

    string[16] lv_96618FF6;
  
    string[16] lv_3E40DCEF;

    lv_B3606C7F[0][0] = "dbup_g_stat_str_012";
    lv_B3606C7F[0][1] = "dbup_g_stat_str_06";
    lv_B3606C7F[0][2] = "dbup_g_stat_str_11";
    lv_B3606C7F[0][3] = "dbup_g_stat_str_16";
    lv_B3606C7F[0][4] = "dbup_g_stat_str_21";
    lv_B3606C7F[0][5] = "dbup_g_stat_str_26";
    lv_B3606C7F[0][6] = "dbup_g_stat_str_31";
    lv_B3606C7F[0][7] = "dbup_g_stat_str_36";
    lv_B3606C7F[0][8] = "dbup_g_stat_str_41";
    lv_B3606C7F[0][9] = "dbup_g_stat_str_46";
    lv_B3606C7F[1][0] = "dbup_g_stat_int_01";
    lv_B3606C7F[1][1] = "dbup_g_stat_int_06";
    lv_B3606C7F[1][2] = "dbup_g_stat_int_11";
    lv_B3606C7F[1][3] = "dbup_g_stat_int_16";
    lv_B3606C7F[1][4] = "dbup_g_stat_int_21";
    lv_B3606C7F[1][5] = "dbup_g_stat_int_26";
    lv_B3606C7F[1][6] = "dbup_g_stat_int_31";
    lv_B3606C7F[1][7] = "dbup_g_stat_int_36";
    lv_B3606C7F[1][8] = "dbup_g_stat_int_41";
    lv_B3606C7F[1][9] = "dbup_g_stat_int_46";
    lv_E1FEB3A7[0][0] = "dbup_f_stat_str_01";
    lv_E1FEB3A7[0][1] = "dbup_f_stat_str_06";
    lv_E1FEB3A7[0][2] = "dbup_f_stat_str_11";
    lv_E1FEB3A7[0][3] = "dbup_f_stat_str_16";
    lv_E1FEB3A7[0][4] = "dbup_f_stat_str_21";
    lv_E1FEB3A7[0][5] = "dbup_f_stat_str_26";
    lv_E1FEB3A7[0][6] = "dbup_f_stat_str_31";
    lv_E1FEB3A7[0][7] = "dbup_f_stat_str_36";
    lv_E1FEB3A7[0][8] = "dbup_f_stat_str_41";
    lv_E1FEB3A7[0][9] = "dbup_f_stat_str_46";
    lv_E1FEB3A7[1][0] = "dbup_f_stat_int_01";
    lv_E1FEB3A7[1][1] = "dbup_f_stat_int_06";
    lv_E1FEB3A7[1][2] = "dbup_f_stat_int_11";
    lv_E1FEB3A7[1][3] = "dbup_f_stat_int_16";
    lv_E1FEB3A7[1][4] = "dbup_f_stat_int_21";
    lv_E1FEB3A7[1][5] = "dbup_f_stat_int_26";
    lv_E1FEB3A7[1][6] = "dbup_f_stat_int_31";
    lv_E1FEB3A7[1][7] = "dbup_f_stat_int_36";
    lv_E1FEB3A7[1][8] = "dbup_f_stat_int_41";
    lv_E1FEB3A7[1][9] = "dbup_f_stat_int_46";
    lv_D280BB95[1][0] = "dbup_f_stat_int_5";
    lv_D280BB95[1][1] = "dbup_f_stat_int_062";
    lv_D280BB95[1][2] = "dbup_f_stat_int_112";
    lv_D280BB95[1][3] = "dbup_f_stat_int_162";
    lv_D280BB95[1][4] = "dbup_f_stat_int_212";
    lv_D280BB95[1][5] = "dbup_f_stat_int_262";
    lv_D280BB95[1][6] = "dbup_f_stat_int_312";
    lv_D280BB95[1][7] = "dbup_f_stat_int_362";
    lv_D280BB95[1][8] = "dbup_f_stat_int_412";
    lv_D280BB95[1][9] = "dbup_f_stat_int_462";
    lv_99015105[0][0] = "dbup_f_stat_str_012";
    lv_99015105[0][1] = "dbup_f_stat_str_062";
    lv_99015105[0][2] = "dbup_f_stat_str_112";
    lv_99015105[0][3] = "dbup_f_stat_str_162";
    lv_99015105[0][4] = "dbup_f_stat_str_212";
    lv_99015105[0][5] = "dbup_f_stat_str_262";
    lv_99015105[0][6] = "dbup_f_stat_str_312";
    lv_99015105[0][7] = "dbup_f_stat_str_362";
    lv_99015105[0][8] = "dbup_f_stat_str_412";
    lv_99015105[0][9] = "dbup_f_stat_str_462";
    lv_99015105[1][0] = "dbup_f_stat_int_52";
    lv_99015105[1][1] = "dbup_f_stat_int_0622";
    lv_99015105[1][2] = "dbup_f_stat_int_1122";
    lv_99015105[1][3] = "dbup_f_stat_int_1622";
    lv_99015105[1][4] = "dbup_f_stat_int_2122";
    lv_99015105[1][5] = "dbup_f_stat_int_2622";
    lv_99015105[1][6] = "dbup_f_stat_int_3122";
    lv_99015105[1][7] = "dbup_f_stat_int_3622";
    lv_99015105[1][8] = "dbup_f_stat_int_4122";
    lv_99015105[1][9] = "dbup_f_stat_int_4622";

    gv_F8080DD9[player][0] = lv_B3606C7F[0][gf_3761C93C(gv_131E8983[player])];
    gv_F8080DD9[player][1] = lv_B3606C7F[1][gf_3761C93C(gv_131E8983[player])];
    gv_47EB06F2[player][0] = lv_E1FEB3A7[0][gf_3761C93C(gv_131E8983[player])];
    gv_47EB06F2[player][1] = lv_E1FEB3A7[1][gf_3761C93C(gv_131E8983[player])];
    gv_454FA4B8[player][1] = lv_D280BB95[1][gf_3761C93C(gv_131E8983[player])];
    gv_85488D42[player][1] = lv_99015105[1][gf_3761C93C(gv_131E8983[player])];
    gv_85488D42[player][0] = lv_99015105[0][gf_3761C93C(gv_131E8983[player])];

    lv_3E40DCEF[0] = "dbup_i_cool_01";
    lv_3E40DCEF[1] = "dbup_i_cool_06";
    lv_3E40DCEF[2] = "dbup_i_cool_11";
    lv_3E40DCEF[3] = "dbup_i_cool_16";
    lv_3E40DCEF[4] = "dbup_i_cool_21";
    lv_3E40DCEF[5] = "dbup_i_cool_26";
    lv_3E40DCEF[6] = "dbup_i_cool_31";
    lv_3E40DCEF[7] = "dbup_i_cool_36";
    lv_3E40DCEF[8] = "dbup_i_cool_41";
    lv_3E40DCEF[9] = "dbup_i_cool_46";

    gv_EFE7171B[player] = lv_3E40DCEF[gf_3761C93C(gv_131E8983[player])];

    lv_96618FF6[0] = "dbup_e_stat_str_01";
    lv_96618FF6[1] = "dbup_e_stat_str_06";
    lv_96618FF6[2] = "dbup_e_stat_str_11";
    lv_96618FF6[3] = "dbup_e_stat_str_16";
    lv_96618FF6[4] = "dbup_e_stat_str_21";
    lv_96618FF6[5] = "dbup_e_stat_str_26";
    lv_96618FF6[6] = "dbup_e_stat_str_31";
    lv_96618FF6[7] = "dbup_e_stat_str_36";
    lv_96618FF6[8] = "dbup_e_stat_str_41";
    lv_96618FF6[9] = "dbup_e_stat_str_46";

    gv_93D2AA8F[player] = lv_96618FF6[gf_3761C93C(gv_131E8983[player])];
}

void initDataForPlayer(){
    
    //初始化信息

    //加点的需要的钱、各种stat值
    TriggerExecute(gt_C7E3A592, false, true);
    //属性上限
    TriggerExecute(gt_84BE2900, false, true);
    TriggerExecute(gt_53B638C3, false, true);
    TriggerExecute(gt_B15050B7, false, true);
    //技能数据
    TriggerExecute(gt_F00C0934, false, true);
    TriggerExecute(gt_64FBF599, false, true);
    TriggerExecute(gt_27ED109B, false, true);
    TriggerExecute(gt_449346FA, false, true);
    TriggerExecute(gt_936A4CD0, false, true);
    TriggerExecute(gt_4763C627, false, true);
    TriggerExecute(gt_7B46B8A2, false, true);
    TriggerExecute(gt_E09377E6, false, true);
    TriggerExecute(gt_21AB3C1E, false, true);
  
    setStatStrsforPlayer(getPlayerLastPicked());
}

void nextRound(){
   
    // UnitRemove(UnitGroupUnit(UnitGroup("dbyu24_1_4r", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0), 1));
    // UnitRemove(UnitGroupUnit(UnitGroup("PickupEnergy25", 0, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0), 1));
   
    // lv_E79009D1[0] = PointFromId(36);
    // lv_E79009D1[1] = PointFromId(37);

    bool light;
    int i;

    //白天晚上 夜猎
    if ((round + 1) % 2 == 0)
    {
        GameSetLighting("Char2", 1.4);
        light = 0;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Button/Tooltip/db_txt_preset_zameText_55"));
        TechTreeUpgradeAddLevel(0, "dbup_bam", (TechTreeUpgradeCount(0, "dbup_bam", c_techCountCompleteOnly) * -1));
    }
    else
    {
        GameSetLighting("IceWorldNight", 1.4);
        light = 1;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Button/Tooltip/db_txt_preset_zameText_56"));
        TechTreeUpgradeAddLevel(0, "dbup_bam", 1);
    }
    gv_8D37EDF7 = round;
    gf_1100131E(false);
    IntLoopBegin(1,10);
    while(!IntLoopDone()){
        gf_587416AA(IntLoopCurrent(), false);
       //回合升级总成
        TechTreeUpgradeAddLevel(IntLoopCurrent(), "roundupgradeTotal", 1);
        gf_35172460(IntLoopCurrent(), 0);
        if (light == 0)
        {
            //夜晚减视野
            TechTreeUpgradeAddLevel(IntLoopCurrent(), "dbup_bam",
                (TechTreeUpgradeCount(IntLoopCurrent(), "dbup_bam", c_techCountCompleteOnly) * -1));
            UnitBehaviorRemove(gv_71C054E5[IntLoopCurrent()], "dbdo09_1_0t_17", 1);
            if ((gv_131E8983[IntLoopCurrent()] == 20) && (gv_BB156610.lv_0195430E[IntLoopCurrent()][0] == 0))
            {
                UnitBehaviorRemove(gv_71C054E5[IntLoopCurrent()], "dbdo20_1_0t2", 1);
            }
            if ((gv_131E8983[IntLoopCurrent()] == 29) && (gv_BB156610.lv_0195430E[IntLoopCurrent()][3] == 0))
            {
                TechTreeUpgradeAddLevel(IntLoopCurrent(), "dhup29_1_3e", (TechTreeUpgradeCount(IntLoopCurrent(), "dhup29_1_3e", c_techCountCompleteOnly) * -1));
            }
        }
        else
        {
            TechTreeUpgradeAddLevel(IntLoopCurrent(), "dbup_bam", 1);
            if ((gv_131E8983[IntLoopCurrent()] == 9) && (gv_BB156610.lv_0195430E[IntLoopCurrent()][4] == 0) && (gv_D0B36B8F[IntLoopCurrent()][4] >= 1))
            {
                UnitBehaviorAdd(gv_71C054E5[IntLoopCurrent()], "dbdo09_1_0t_17", gv_71C054E5[IntLoopCurrent()], 1);
            }
            if ((gv_131E8983[IntLoopCurrent()] == 20) && (gv_BB156610.lv_0195430E[IntLoopCurrent()][0] == 0))
            {
                UnitBehaviorAdd(gv_71C054E5[IntLoopCurrent()], "dbdo20_1_0t2", gv_71C054E5[IntLoopCurrent()], 1);
            }
            if ((gv_131E8983[IntLoopCurrent()] == 29) && (gv_BB156610.lv_0195430E[IntLoopCurrent()][3] == 0))
            {
                TechTreeUpgradeAddLevel(IntLoopCurrent(), "dhup29_1_3e", gv_D0B36B8F[IntLoopCurrent()][3]);
            }
        }

        
        gf_67CE0F82(gv_71C054E5[IntLoopCurrent()]);
        gf_C3B15BFE(gv_71C054E5[IntLoopCurrent()]);
        gf_67FA50E0(gv_71C054E5[IntLoopCurrent()]);
        gf_C71F331B(IntLoopCurrent());
        // DialogSetVisible(gv_4EE04C84, PlayerGroupSingle(IntLoopCurrent()), false);
        // UnitSetPosition(gv_71C054E5[IntLoopCurrent()], RegionRandomPoint(RegionCircle(lv_E79009D1[gv_9EEEA78D[IntLoopCurrent()]], lv_02C3DE6D)), false);
        UnitBehaviorRemove(gv_71C054E5[IntLoopCurrent()], "nodie2", 1);
        UnitBehaviorRemove(gv_71C054E5[IntLoopCurrent()], "jocuser", 1);
        // UnitSelect(gv_71C054E5[IntLoopCurrent()], IntLoopCurrent(), true);
        UnitBehaviorAddPlayer(gv_71C054E5[IntLoopCurrent()], "nodie2", IntLoopCurrent(), 1);
        UnitBehaviorRemove(gv_71C054E5[IntLoopCurrent()], "nodie24res2", 1);
        // libNtve_gf_MakeUnitInvulnerable(gv_71C054E5[IntLoopCurrent()], false);
        // CameraPan(IntLoopCurrent(), UnitGetPosition(gv_71C054E5[IntLoopCurrent()]), 1.0, -1, 35.0, false);
        UnitSetHeight(gv_71C054E5[IntLoopCurrent()], 0.0, 0.0);
        // UnitIssueOrder(gv_71C054E5[IntLoopCurrent()], Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        // libNtve_gf_ShowHideUnit(gv_71C054E5[IntLoopCurrent()], true);
        // libNtve_gf_PauseUnit(gv_71C054E5[IntLoopCurrent()], false);
        // DialogSetVisible(gv_E7A5EC81.lv_42927F92, PlayerGroupSingle(IntLoopCurrent()), false);
        // DialogSetVisible(gv_E7A5EC81.lv_01972C34, PlayerGroupSingle(IntLoopCurrent()), false);
        // DialogControlSetPosition(gv_81AD7FB9[0], PlayerGroupSingle(IntLoopCurrent()), c_anchorBottomLeft, 2, 2);
        UnitCreateEffectUnit(gv_71C054E5[IntLoopCurrent()], "rountinitsss", gv_71C054E5[IntLoopCurrent()]);
        gf_17113C81(gv_71C054E5[IntLoopCurrent()]);
        gf_1DA6D503(gv_71C054E5[IntLoopCurrent()]);
        if ((gv_131E8983[IntLoopCurrent()] == 8) && (gv_BB156610.lv_0195430E[IntLoopCurrent()][0] == 0))
        {
            UnitSetPosition(gv_E7EDB9D8[IntLoopCurrent()], lv_E79009D1[gv_9EEEA78D[IntLoopCurrent()]], false);
            UnitIssueOrder(gv_E7EDB9D8[IntLoopCurrent()], Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            libNtve_gf_ShowHideUnit(gv_E7EDB9D8[IntLoopCurrent()], true);
            UnitBehaviorAdd(gv_E7EDB9D8[IntLoopCurrent()], "nodie24res3", gv_E7EDB9D8[IntLoopCurrent()], 1);
        }
        if ((gv_131E8983[IntLoopCurrent()] == 1) && (gv_BB156610.lv_0195430E[IntLoopCurrent()][0] == 1))
        {
            UnitBehaviorAdd(gv_71C054E5[IntLoopCurrent()], "nodie3", gv_71C054E5[IntLoopCurrent()], 1);
            UnitBehaviorAdd(gv_71C054E5[IntLoopCurrent()], "nodie32", gv_71C054E5[IntLoopCurrent()], 1);
            UnitBehaviorAdd(gv_71C054E5[IntLoopCurrent()], "nodie322", gv_71C054E5[IntLoopCurrent()], 1);
            UnitBehaviorRemove(gv_71C054E5[IntLoopCurrent()], "nodie", 1);
            UnitBehaviorRemove(gv_71C054E5[IntLoopCurrent()], "nodie4", 1);
            UnitBehaviorRemove(gv_71C054E5[IntLoopCurrent()], "nodie42", 1);
        }
        if ((gv_131E8983[IntLoopCurrent()] == 49) && (gv_BB156610.lv_0195430E[IntLoopCurrent()][0] == 0))
        {
            UnitBehaviorAdd(gv_71C054E5[IntLoopCurrent()], "dbdo49_1_0t_16", gv_71C054E5[IntLoopCurrent()], 1);
            UnitBehaviorAdd(gv_71C054E5[IntLoopCurrent()], "dbdo49_1_0t_506", gv_71C054E5[IntLoopCurrent()], 1);
            UnitBehaviorAdd(gv_71C054E5[IntLoopCurrent()], "dbdo49_1_0t_600", gv_71C054E5[IntLoopCurrent()], 1);
            UnitBehaviorRemove(gv_71C054E5[IntLoopCurrent()], "dbdo49_1_0t_11", 1);
            UnitBehaviorRemove(gv_71C054E5[IntLoopCurrent()], "dbdo49_1_0t_10", 1);
            UnitBehaviorRemove(gv_71C054E5[IntLoopCurrent()], "dbdo49_1_0t_400", 1);
            UnitBehaviorRemove(gv_71C054E5[IntLoopCurrent()], "dbdo49_1_0t_402", 1);
            UnitBehaviorRemove(gv_71C054E5[IntLoopCurrent()], "dbdo49_1_0t_405", 1);
            UnitBehaviorRemove(gv_71C054E5[IntLoopCurrent()], "nodie", 1);
            UnitBehaviorRemove(gv_71C054E5[IntLoopCurrent()], "nodie4", 1);
            UnitBehaviorRemove(gv_71C054E5[IntLoopCurrent()], "nodie42", 1);
        }
        gf_29DB47D7(IntLoopCurrent(), true);
        DialogControlSetEnabled(gv_3050FA16[IntLoopCurrent()][1], PlayerGroupAll(), true);
        if ((gv_EE4E2B0D[IntLoopCurrent()] != c_invalidDialogControlId))
        {
            libNtve_gf_SetDialogItemTintColor(gv_EE4E2B0D[IntLoopCurrent()], Color(0.00, 66.67, 66.67), PlayerGroupAll());
            libNtve_gf_SetDialogItemColor(gv_EE4E2B0D[IntLoopCurrent()], Color(0.00, 66.67, 66.67), PlayerGroupAll());
        }
        libNtve_gf_ShowHideUnit(gv_71C054E5[IntLoopCurrent()], true);
        UnitBehaviorAddPlayer(gv_71C054E5[IntLoopCurrent()], "nodie24res3", IntLoopCurrent(), 1);
        gv_EDC9A72C[IntLoopCurrent()] = 0;
        gv_55A8AB50[IntLoopCurrent()] += 1;
        gv_48E7CC05[gv_9EEEA78D[IntLoopCurrent()]] += 1;
        libNtve_gf_SetDialogItemText(gv_83D42C8D[IntLoopCurrent()][1], IntToText(gv_D0B36B8F[IntLoopCurrent()][1]), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_83D42C8D[IntLoopCurrent()][2], IntToText(gv_D0B36B8F[IntLoopCurrent()][2]), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_83D42C8D[IntLoopCurrent()][3], IntToText(gv_D0B36B8F[IntLoopCurrent()][3]), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_83D42C8D[IntLoopCurrent()][4], IntToText(gv_D0B36B8F[IntLoopCurrent()][4]), PlayerGroupAll());
        if ((gv_FDDB3651[IntLoopCurrent()] >= 1))
        {
            if ((gv_FDDB3651[IntLoopCurrent()] == 1))
            {
                UnitCreateEffectUnit(gv_71C054E5[IntLoopCurrent()], "dbhy_00_06_7", gv_71C054E5[IntLoopCurrent()]);
            }
            else if ((gv_FDDB3651[IntLoopCurrent()] == 2))
            {
                UnitCreateEffectUnit(gv_71C054E5[IntLoopCurrent()], "dbhy_00_06_6", gv_71C054E5[IntLoopCurrent()]);
            }
            else if ((gv_FDDB3651[IntLoopCurrent()] == 3))
            {
                UnitCreateEffectUnit(gv_71C054E5[IntLoopCurrent()], "dbhy_00_24", gv_71C054E5[IntLoopCurrent()]);
            }
            else if ((gv_FDDB3651[IntLoopCurrent()] == 4))
            {
                UnitCreateEffectUnit(gv_71C054E5[IntLoopCurrent()], "dbhy_00_200", gv_71C054E5[IntLoopCurrent()]);
            }
            else if ((gv_FDDB3651[IntLoopCurrent()] == 5))
            {
                UnitCreateEffectUnit(gv_71C054E5[IntLoopCurrent()], "dbhy_00_25", gv_71C054E5[IntLoopCurrent()]);
            }
            gv_FDDB3651[IntLoopCurrent()] = 0;
        }
        if ((gv_69CED423[IntLoopCurrent()] >= 1))
        {
            CameraFollowUnitGroup(IntLoopCurrent(), libNtve_gf_ConvertUnitToUnitGroup(gv_71C054E5[IntLoopCurrent()]), true, false);
        }
        else
        {
            CameraFollowUnitGroup(IntLoopCurrent(), libNtve_gf_ConvertUnitToUnitGroup(gv_71C054E5[IntLoopCurrent()]), false, false);
        }
        lv_3434E921 = 0;
        for (; ((auto33DD7901_ai >= 0 && lv_3434E921 <= auto33DD7901_ae) || (auto33DD7901_ai < 0 && lv_3434E921 >= auto33DD7901_ae)); lv_3434E921 += auto33DD7901_ai)
        {
            if ((DialogControlGetType(gv_71CBD8EA[IntLoopCurrent()][lv_3434E921]) == c_triggerControlTypeImage))
            {
                DialogControlSetEnabled(gv_71CBD8EA[IntLoopCurrent()][lv_3434E921], PlayerGroupAll(), true);
            }
        }
        lv_4036777D += 1;
    // }
    // else
    // {
    //     if ((UnitIsAlive(gv_71C054E5[IntLoopCurrent()]) == true))
    //     {
    //         UnitBehaviorAdd(gv_71C054E5[IntLoopCurrent()], "nodie24res22", gv_71C054E5[IntLoopCurrent()], 1);
    //         Wait(0.77, c_timeGame);
    //         UnitRemove(gv_71C054E5[IntLoopCurrent()]);
    //         if ((gv_131E8983[IntLoopCurrent()] == 19))
    //         {
    //             if ((gv_5F6F4890[0] == IntLoopCurrent()))
    //             {
    //                 TriggerEnable(gt_06F46C59, false);
    //                 TriggerEnable(gt_B8A29486, false);
    //             }
    //             else
    //             {
    //                 TriggerEnable(gt_6E4F8EAE, false);
    //                 TriggerEnable(gt_CC047C8E, false);
    //             }
    //         }
    //         if ((gv_131E8983[IntLoopCurrent()] == 43))
    //         {
    //             if ((gv_D07DF7B9[0] == IntLoopCurrent()))
    //             {
    //                 TriggerEnable(gt_9F080E6C, false);
    //             }
    //             else
    //             {
    //                 TriggerEnable(gt_64FD760E, false);
    //             }
    //         }
    //         if ((gv_131E8983[IntLoopCurrent()] == 10))
    //         {
    //             gv_131E8983[IntLoopCurrent()] = 0;
    //             lv_725B0C30 = 1;
    //             for (; ((auto64BC0A81_ai >= 0 && lv_725B0C30 <= auto64BC0A81_ae) || (auto64BC0A81_ai < 0 && lv_725B0C30 >= auto64BC0A81_ae)); lv_725B0C30 += auto64BC0A81_ai)
    //             {
    //                 if ((lv_725B0C30 != IntLoopCurrent()) && (gv_131E8983[lv_725B0C30] == 10) && gf_009A8454(lv_725B0C30, 1))
    //                 {
    //                     lv_A38CA752 += 1;
    //                 }
    //             }
    //             if ((lv_A38CA752 == 0))
    //             {
    //                 TriggerEnable(gt_24D8433E, false);
    //             }
    //             lv_A38CA752 = 0;
    //         }
    //         if ((gv_131E8983[IntLoopCurrent()] == 8))
    //         {
    //             gv_131E8983[IntLoopCurrent()] = 0;
    //             lv_725B0C30 = 1;
    //             for (; ((autoB0E49188_ai >= 0 && lv_725B0C30 <= autoB0E49188_ae) || (autoB0E49188_ai < 0 && lv_725B0C30 >= autoB0E49188_ae)); lv_725B0C30 += autoB0E49188_ai)
    //             {
    //                 if ((lv_725B0C30 != IntLoopCurrent()) && (gv_131E8983[lv_725B0C30] == 8) && gf_009A8454(lv_725B0C30, 1))
    //                 {
    //                     lv_A38CA752 += 1;
    //                 }
    //             }
    //             if ((lv_A38CA752 == 0))
    //             {
    //                 TriggerEnable(gt_07C5E602, false);
    //                 TriggerEnable(gt_D5601087, false);
    //             }
    //             lv_A38CA752 = 0;
    //         }
    //     }
    // }
        IntLoopStep();
    }
    IntLoopEnd();

    gv_BB284D6D = 1;
    //-------------------------------
    //timer
    // TriggerExecute(gt_50AA3CE2, false, false);
    gf_21699977();
    gf_AA586BEC((StringExternal("Param/Value/76C3F336") + (IntToText(gv_8D37EDF7) + StringExternal("Button/Tooltip/db_txt_preset_zameText_80"))), 3.0, false);
    gf_85CE78E1();



    if ((gv_3CD651F7 == 0))
    {
        if (((gv_8D37EDF7 == 4) || (gv_8D37EDF7 == 7) || (gv_8D37EDF7 == 10) || (gv_8D37EDF7 == 13) || (gv_8D37EDF7 == 16) || (gv_8D37EDF7 == 19) || (gv_8D37EDF7 == 22) || (gv_8D37EDF7 == 25) || (gv_8D37EDF7 == 28) || (gv_8D37EDF7 == 31) || (gv_8D37EDF7 == 34) || (gv_8D37EDF7 == 37) || (gv_8D37EDF7 == 40)))
        {
            if (((gv_8D37EDF7 == 7) || (gv_8D37EDF7 == 10) || (gv_8D37EDF7 == 13) || (gv_8D37EDF7 == 16) || (gv_8D37EDF7 == 19)))
            {
                if (gv_8D37EDF7 == 7)
                {
                    i = 1;
                }
                else if (gv_8D37EDF7 == 10)
                {
                    i = 2;
                }  
                else if (gv_8D37EDF7 == 13)
                {
                    i = 3;
                }
                else if (gv_8D37EDF7 == 16)
                {
                    i = 4;
                }
                else if (gv_8D37EDF7 == 19)
                {
                    i = 5;
                }
                else
                {
                }
                gv_D79965A1[1][10] = i;
                // lv_5E2ADBEE = gf_D7D17EEF(gv_D79965A1[0][gv_288042C5.lv_107F1097], i, gv_288042C5.lv_47E787AD, gv_8ED21F40[gv_288042C5.lv_107F1097], 2, StringExternal("Button/Tooltip/db_txt_preset_zameText_81"));
                // libNtve_gf_SetDialogItemTooltip(gv_F4E2C4A0[0][10], lv_5E2ADBEE, PlayerGroupAll());
                IntLoopBegin(1,10);
                while (!IntLoopDone())
                {
                    if (gf_009A8454(IntLoopCurrent(), 0))
                    {
                        if ((gv_4B57750F[IntLoopCurrent()] == true))
                        {
                            if ((gv_60E73511[IntLoopCurrent()][10] >= gv_D79965A1[1][10]))
                            {
                                DialogControlSetEnabled(gv_F4E2C4A0[0][10], PlayerGroupSingle(IntLoopCurrent()), false);
                                DialogControlSetEnabled(gv_F4E2C4A0[1][10], PlayerGroupSingle(IntLoopCurrent()), false);
                                DialogControlSetEnabled(gv_F4E2C4A0[2][10], PlayerGroupSingle(IntLoopCurrent()), false);
                            }
                            else
                            {
                                DialogControlSetEnabled(gv_F4E2C4A0[0][10], PlayerGroupSingle(IntLoopCurrent()), true);
                                DialogControlSetEnabled(gv_F4E2C4A0[1][10], PlayerGroupSingle(IntLoopCurrent()), true);
                                DialogControlSetEnabled(gv_F4E2C4A0[2][10], PlayerGroupSingle(IntLoopCurrent()), true);
                            }
                        }
                    }
                    IntLoopStep();
                }
                IntLoopEnd();
            }
           
            IntLoopBegin(1,10);
            while (!IntLoopDone())
            {
                lv_29857729 = false;
                lv_C1E401DB = 0;
                if (gf_009A8454(IntLoopCurrent(), 1))
                {
                    if ((gv_A9D3377E[IntLoopCurrent()] == true))
                    {
                        lv_29857729 = true;
                    }
                    TechTreeUpgradeAddLevel(IntLoopCurrent(), "roundupgradeBonus", 1);
                    gf_35172460(IntLoopCurrent(), 1);
                    if ((lv_29857729 == false || gv_DA579AA4 == 2))
                    {
                        PlayerModifyPropertyInt(IntLoopCurrent(), c_playerPropMinerals, c_playerPropOperAdd, 2500);
                        libNtve_gf_SetDialogItemText(gv_9CE94DA6, (StringExternal("Param/Value/1EEF1501") + (IntToText(2500) + StringExternal("Param/Value/536150BB"))), PlayerGroupSingle(IntLoopCurrent()));
                    }
                    else
                    {
                        if ((gv_8D37EDF7 == 4))
                        {
                            lv_C1E401DB += 200;
                        }
                        else
                        {
                            lv_C1E401DB += 150;
                        }
                        UIDisplayMessage(PlayerGroupSingle(IntLoopCurrent()), c_messageAreaSubtitle, (StringExternal("Param/Value/5887766B") + IntToText(lv_C1E401DB) + StringExternal("Button/Tooltip/db_txt_preset_zameText_82")));
                        PlayerModifyPropertyInt(IntLoopCurrent(), c_playerPropMinerals, c_playerPropOperAdd, (2500 + lv_C1E401DB));
                        libNtve_gf_SetDialogItemText(gv_9CE94DA6, (StringExternal("Param/Value/5034CF64") + (IntToText((2500 + gv_2FF985A8)) + StringExternal("Param/Value/A00565E3"))), PlayerGroupSingle(IntLoopCurrent()));
                    }
                    DialogControlFadeTransparency(gv_9CE94DA6, PlayerGroupSingle(IntLoopCurrent()), 0.0, 0.0);
                    DialogControlFadeTransparency(gv_9CE94DA6, PlayerGroupSingle(IntLoopCurrent()), 4.9, 100.0);
                }
                IntLoopStep();
            }
            IntLoopEnd();
            gf_AA586BEC((StringExternal("Param/Value/02F67AB5") + IntToText(gv_8D37EDF7) + StringExternal("Button/Tooltip/db_txt_preset_zameText_83") + IntToText(2500) + StringExternal("Button/Tooltip/db_txt_preset_zameText_84")), 1.75, false);
        }   
    }

    //------------------------------------------------------------------------------------------------
    if ((gv_3CD651F7 == 0) && (gv_8CFA50F8[0] == gv_8CFA50F8[1]) && (gv_8CFA50F8[0] == (gv_8A039855 - 1)))
    {
        gv_3CD651F7 = 1;
        IntLoopBegin(1,10);
        while (!IntLoopDone())
        {
            if (gf_009A8454(IntLoopCurrent(), 1))
            {
                PlayerModifyPropertyInt(IntLoopCurrent(), c_playerPropMinerals, c_playerPropOperAdd, 5500);
                SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
                SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "dbsa_bgm_lose", c_soundtrackCueAny, 0, true);
                libNtve_gf_SetDialogItemText(gv_9CE94DA6, (StringExternal("Param/Value/D1B74F17") 
                + (IntToText(5500) + StringExternal("Param/Value/FAC2C3C8"))), PlayerGroupSingle(IntLoopCurrent()));
                DialogControlFadeTransparency(gv_9CE94DA6, PlayerGroupSingle(IntLoopCurrent()), 0.0, 0.0);
                DialogControlFadeTransparency(gv_9CE94DA6, PlayerGroupSingle(IntLoopCurrent()), 4.9, 100.0);
                TechTreeUpgradeAddLevel(IntLoopCurrent(), "roundupgradeFinal", 1);
                gf_35172460(IntLoopCurrent(), 2); 
            }
            IntLoopStep();
        }
        IntLoopEnd();
        gf_AA586BEC((StringExternal("Param/Value/DFE0640C") + StringExternal("Button/Tooltip/db_txt_preset_zameText_85") + StringExternal("Button/Tooltip/db_txt_preset_zameText_83") + IntToText(5500) + StringExternal("Button/Tooltip/db_txt_preset_zameText_84")), 1.75, false);
    }
    Wait(0.5, c_timeGame);
    DialogSetVisible(gv_E7A5EC81.lv_42927F92, PlayerGroupAll(), false);
    DialogSetVisible(gv_E7A5EC81.lv_01972C34, PlayerGroupAll(), false);
    if (((gv_8D37EDF7 != 0) || (gv_8D37EDF7 != 1) || (gv_8D37EDF7 != 2)))
    {
        IntLoopBegin(1,10);
        for (; ((autoCD903096_ai >= 0 && IntLoopCurrent() <= autoCD903096_ae) || (autoCD903096_ai < 0 && IntLoopCurrent() >= autoCD903096_ae)); IntLoopCurrent() += autoCD903096_ai)
        {
            if (gf_009A8454(IntLoopCurrent(), 1))
            {
                PlayerCreateEffectUnit(IntLoopCurrent(), "dbhy_00_0622322", gv_71C054E5[IntLoopCurrent()]);
            }
        }
        gf_AA586BEC((((StringExternal("Param/Value/ED4EE02F") + IntToText(gv_8D37EDF7)) + StringExternal("Button/Tooltip/db_txt_preset_zameText_86")) + (IntToText(7) + StringExternal("Button/Tooltip/db_txt_preset_zameText_87"))), 1.25, false);
    }
    Wait(1.4, c_timeGame);
    IntLoopCurrent() = 1;
    for (; ((auto31602D5B_ai >= 0 && IntLoopCurrent() <= auto31602D5B_ae) || (auto31602D5B_ai < 0 && IntLoopCurrent() >= auto31602D5B_ae)); IntLoopCurrent() += auto31602D5B_ai)
    {
        if (gf_009A8454(IntLoopCurrent(), 1))
        {
            UnitSetHeight(gv_71C054E5[IntLoopCurrent()], 0.0, 0.0);
            if (((gv_131E8983[IntLoopCurrent()] == 1) || (gv_131E8983[IntLoopCurrent()] == 5)))
            {
                UnitBehaviorRemove(gv_71C054E5[IntLoopCurrent()], "nodie2", 1);
                Wait(0.0625, c_timeGame);
                UnitSelect(gv_71C054E5[IntLoopCurrent()], IntLoopCurrent(), true);
                UnitBehaviorAddPlayer(gv_71C054E5[IntLoopCurrent()], "nodie2", IntLoopCurrent(), 1);
            }
        }
    }
}

