//GongSun_ink 2022


int pickPlayer(bool isAlly){
    bool flag;
    int i = 1; 

    if (isAlly){  
        for (; i < 6 ; i+=1){
           if (getPlayerHeroId(i) == 0){
                showMsg(1,IntToString(i));
                return i;
           }
        }
    }else {
        for (i = 6; i < 11 ;i+=1){
            if (getPlayerHeroId(i) == 0){
                return i;
           }
        }
    }
    return -1;
}

void playerSummonHero(){

    point[2] teamPoints;
    int playerId = getPlayerLastPicked();

    teamPoints[0] = PointFromId(36);
    teamPoints[1] = PointFromId(37);
    //------------------------------------
    
    //更新数值显示面板
    gf_3A83C136(playerId);

    //回合升级总成
    TechTreeUpgradeAddLevel(playerId, "roundupgradeTotal", 1); 

    //女院被动
    gf_35172460(playerId, 0);

    //克劳和四季的触发器脚本只对这四个单位生效
    if (((gv_131E8983[playerId] == 19) || (gv_131E8983[playerId] == 43))){
        if ((UnitGetOwner(UnitFromId(1657007678)) != 0 && UnitGetOwner(UnitFromId(168525155)) != 0) || 
            (UnitGetOwner(UnitFromId(20)) != 0 && UnitGetOwner(UnitFromId(608)) != 0)){
            showMsg(1,"目前由于源代码限制,四季和克劳不能多于2个");
            return;
        }
        if ((gv_131E8983[playerId] == 19)){
            if ((UnitGetOwner(UnitFromId(20)) == 0)){
                libNtve_gf_ShowHideUnit(UnitFromId(20), true);
                UnitSetOwner(UnitFromId(20), playerId, true);
                UnitSetPosition(UnitFromId(20), RegionRandomPoint(RegionCircle(teamPoints[gv_9EEEA78D[playerId]], 5.5)), false);
                gv_71C054E5[playerId] = UnitFromId(20);
                gv_5F6F4890[0] = playerId;
                UnitCreateEffectUnit(UnitFromId(20), "effectclickss2", UnitFromId(20));
                TriggerEnable(gt_06F46C59, true);
                TriggerEnable(gt_B8A29486, true);
            }
            else{
                libNtve_gf_ShowHideUnit(UnitFromId(608), true);
                UnitSetOwner(UnitFromId(608), playerId, true);
                UnitSetPosition(UnitFromId(608), RegionRandomPoint(RegionCircle(teamPoints[gv_9EEEA78D[playerId]], 5.5)), false);
                gv_71C054E5[playerId] = UnitFromId(608);
                gv_5F6F4890[1] = playerId;
                UnitCreateEffectUnit(UnitFromId(608), "effectclickss2", UnitFromId(608));
                TriggerEnable(gt_6E4F8EAE, true);
                TriggerEnable(gt_CC047C8E, true);
                }
        }
        else if ((gv_131E8983[playerId] == 43)){

            if ((UnitGetOwner(UnitFromId(1657007678)) == 0)){
                libNtve_gf_ShowHideUnit(UnitFromId(1657007678), true);
                UnitSetOwner(UnitFromId(1657007678), playerId, true);
                UnitSetPosition(UnitFromId(1657007678), RegionRandomPoint(RegionCircle(teamPoints[gv_9EEEA78D[playerId]], 5.5)), false);
                gv_71C054E5[playerId] = UnitFromId(1657007678);
                gv_D07DF7B9[0] = playerId;
                UnitCreateEffectUnit(UnitFromId(1657007678), "effectclickss", UnitFromId(1657007678));
                TriggerEnable(gt_9F080E6C, true);
            }
            else{
                libNtve_gf_ShowHideUnit(UnitFromId(168525155), true);
                UnitSetOwner(UnitFromId(168525155), playerId, true);
                UnitSetPosition(UnitFromId(168525155), RegionRandomPoint(RegionCircle(teamPoints[gv_9EEEA78D[playerId]], 5.5)), false);
                gv_71C054E5[playerId] = UnitFromId(168525155);
                gv_D07DF7B9[1] = playerId;
                UnitCreateEffectUnit(UnitFromId(168525155), "effectclickss", UnitFromId(168525155));
                TriggerEnable(gt_64FD760E, true);
            } 
        }
    }
    else
    {
        //直接创建英雄
        libNtve_gf_CreateUnitsWithDefaultFacing(1, gv_367C7760[gv_131E8983[playerId]],
                c_unitCreateIgnorePlacement, playerId, RegionRandomPoint(RegionCircle(teamPoints[gv_9EEEA78D[playerId]], 5.5)));
        gv_71C054E5[playerId] = UnitLastCreated();                   
    }
    gv_305DA55D[playerId] = true;
    //单位设置队伍颜色
    if ((gv_9EEEA78D[playerId] == 0))
    {
        UnitSetTeamColorIndex(gv_71C054E5[playerId], 5);
    }
    else
    {
        UnitSetTeamColorIndex(gv_71C054E5[playerId], 8);
    }
    //------------------------------------------------------------------------------------
    //启用或禁用技能
    gf_ED9D4333(gv_71C054E5[playerId], playerId);
    
    //只显示操作一次
    if (playerId == 1){
        //显示技能栏、头像、属性栏
        setTestPlayerCurrentSelectedUnit(gv_71C054E5[playerId]);
        updateGameUI(playerId,testModePlayerGroup);
        UnitSelect(gv_71C054E5[playerId], testModePlayer, true);
        DialogSetVisible(gv_5C4043F8.lv_B91A282D, testModePlayerGroup, true);
        DialogSetVisible(gv_5C4043F8.lv_8DEC25E2, testModePlayerGroup, true);
        DialogSetVisible(gv_5C4043F8.lv_AF2E051A, testModePlayerGroup, true);
    }

    //老兵行为
    UnitBehaviorAddPlayer(gv_71C054E5[playerId], "dbdo_ex", playerId, 1);
            
    UnitBehaviorAddPlayer(gv_71C054E5[playerId], "nodie", playerId, 1);
    UnitBehaviorAddPlayer(gv_71C054E5[playerId], "nodie4", playerId, 1);
    UnitBehaviorAddPlayer(gv_71C054E5[playerId], "nodie42", playerId, 1);
    UnitBehaviorAddPlayer(gv_71C054E5[playerId], "nodie2", playerId, 1);

    gv_55A8AB50[playerId] += 1;
    //两边队伍剩余人数
    gv_48E7CC05[gv_9EEEA78D[playerId]] += 1;

    UnitBehaviorAddPlayer(gv_71C054E5[playerId], "nodie25", playerId, 1);
    UnitBehaviorAddPlayer(gv_71C054E5[playerId], "nodie23", playerId, 1);
    UnitBehaviorAddPlayer(gv_71C054E5[playerId], "nodie24res", playerId, 1);        
    
    //快乐冲锋
    gf_20271FB9(playerId);
                
    if ((gv_131E8983[playerId] == 1) && (gv_BB156610.lv_0195430E[playerId][0] == 1))
    {
        UnitBehaviorAdd(gv_71C054E5[playerId], "nodie3", gv_71C054E5[playerId], 1);
        UnitBehaviorAdd(gv_71C054E5[playerId], "nodie32", gv_71C054E5[playerId], 1);
        UnitBehaviorAdd(gv_71C054E5[playerId], "nodie322", gv_71C054E5[playerId], 1);
        UnitBehaviorRemove(gv_71C054E5[playerId], "nodie", 1);
        UnitBehaviorRemove(gv_71C054E5[playerId], "nodie4", 1);
        UnitBehaviorRemove(gv_71C054E5[playerId], "nodie42", 1);
    }
    if ((gv_131E8983[playerId] == 49) && (gv_BB156610.lv_0195430E[playerId][0] == 0))
    {
        UnitBehaviorAdd(gv_71C054E5[playerId], "dbdo49_1_0t_16", gv_71C054E5[playerId], 1);
        UnitBehaviorAdd(gv_71C054E5[playerId], "dbdo49_1_0t_506", gv_71C054E5[playerId], 1);
        UnitBehaviorAdd(gv_71C054E5[playerId], "dbdo49_1_0t_600", gv_71C054E5[playerId], 1);
        UnitBehaviorRemove(gv_71C054E5[playerId], "nodie", 1);
        UnitBehaviorRemove(gv_71C054E5[playerId], "nodie4", 1);
        UnitBehaviorRemove(gv_71C054E5[playerId], "nodie42", 1);
    }
    if ((gv_131E8983[playerId] == 1) && (gv_BB156610.lv_0195430E[playerId][0] == 1))
    {
        UnitBehaviorAdd(gv_71C054E5[playerId], "nodie3", gv_71C054E5[playerId], 1);
        UnitBehaviorAdd(gv_71C054E5[playerId], "nodie32", gv_71C054E5[playerId], 1);
        UnitBehaviorAdd(gv_71C054E5[playerId], "nodie322", gv_71C054E5[playerId], 1);
        UnitBehaviorRemove(gv_71C054E5[playerId], "nodie", 1);
        UnitBehaviorRemove(gv_71C054E5[playerId], "nodie4", 1);
        UnitBehaviorRemove(gv_71C054E5[playerId], "nodie42", 1);
    }
    if ((gv_131E8983[playerId] == 1) && (gv_BB156610.lv_0195430E[playerId][0] == 0))
    {
        UnitBehaviorAdd(gv_71C054E5[playerId], "siyadammm", gv_71C054E5[playerId], 1);
    }
    if ((gv_131E8983[playerId] == 10))
    {
        TriggerEnable(gt_24D8433E, true);
    }
    if ((gv_131E8983[playerId] == 10) && (gv_BB156610.lv_0195430E[playerId][0] == 0))
    {
        UnitBehaviorAdd(gv_71C054E5[playerId], "dbdo_10_1_0t", gv_71C054E5[playerId], 1);
    }
    if ((gv_131E8983[playerId] == 14))
    {
        if ((gv_BB156610.lv_0195430E[playerId][0] == 0))
        {
            TechTreeUpgradeAddLevel(playerId, "dbup_14_1_0t", 1);
        }
        if ((gv_BB156610.lv_0195430E[playerId][0] == 1) && (gv_BB156610.lv_0195430E[playerId][1] == 1) && (gv_BB156610.lv_0195430E[playerId][3] == 1))
        {
            TechTreeUpgradeAddLevel(playerId, "dbup_14_2_4r", 1);
        }
    }
    if ((gv_131E8983[playerId] == 19) && (gv_BB156610.lv_0195430E[playerId][0] == 0))
    {
        UnitBehaviorAdd(gv_71C054E5[playerId], "dbdo_19_1_0t_03", gv_71C054E5[playerId], 1);
    }
    if ((gv_131E8983[playerId] == 8))
    {
        TriggerEnable(gt_D5601087, true);
        TriggerEnable(gt_07C5E602, true);
    }
    if ((gv_131E8983[playerId] == 8) && (gv_BB156610.lv_0195430E[playerId][0] == 0))
    {
        UnitBehaviorAddPlayer(gv_71C054E5[playerId], "dbdo_08_1_0t", playerId, 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "dbyu08_1_0t", c_unitCreateIgnorePlacement, playerId, UnitGetPosition(gv_71C054E5[playerId]));
        gv_E7EDB9D8[playerId] = UnitLastCreated();
        UnitStatusBarOverride(UnitLastCreated(), c_unitStatusGroupOwner);
    }
    if (((gv_131E8983[playerId] == 19))) {
        TriggerEnable(gt_06F46C59, true);
        TriggerEnable(gt_B8A29486, true);
        UnitCreateEffectUnit(gv_71C054E5[playerId], "effectclickss2", gv_71C054E5[playerId]);
    } 
    else if((gv_131E8983[playerId] == 43)) {
        TriggerEnable(gt_9F080E6C, true);
        UnitCreateEffectUnit(gv_71C054E5[playerId], "effectclickss", gv_71C054E5[playerId]);
    } 


    if ((gv_69CED423[playerId] >= 1))
    {
        CameraFollowUnitGroup(playerId, libNtve_gf_ConvertUnitToUnitGroup(gv_71C054E5[playerId]), true, false);
    }
    else
    {
        CameraFollowUnitGroup(playerId, libNtve_gf_ConvertUnitToUnitGroup(gv_71C054E5[playerId]), false, false);
    }

    //玩家技能可升级点数+1
    gv_63B35897[playerId] = 1;
    //没有用的函数
    gf_E21FB1A1(gv_71C054E5[playerId]);
    //技能升级函数
    gf_91088DA7(playerId);
    //显示升级按钮
    
    storeUpgradeBtns(playerId);
 
    //技能组
    gf_C71F331B(playerId);
    //初始属性加点
    gf_C4DA1C21(playerId);
    //技能组第二部分
    gf_08CCA537(playerId);
    //天赋
    gf_D5AA5B4B(playerId);
    //天赋
    gf_63372EA8(playerId);
    //天赋
    // showMsg(1,BoolToString(gv_BB156610.lv_48849745[playerId][gv_55AE090B.lv_5305D027][gv_55AE090B.lv_6B3F8B25]));
    gf_17113C81(gv_71C054E5[playerId]);
    //天赋
    gf_1DA6D503(gv_71C054E5[playerId]);
    UnitSetPropertyFixed(gv_71C054E5[playerId], c_unitPropLifePercent, 100.0);
    //除四季外 其他英雄回复85%能量
    if ((UnitGetType(gv_71C054E5[playerId]) != "dbHero43"))
    {
        UnitSetPropertyFixed(gv_71C054E5[playerId], c_unitPropEnergyPercent, 85.0);
    }
    else
    {
        UnitSetPropertyFixed(gv_71C054E5[playerId], c_unitPropEnergyPercent, 0.0);
    }
    
    gf_67CE0F82(gv_71C054E5[playerId]);
    gf_5B3578B1();
   

    
    gv_BB284D6D = 1;
    gf_5B3968D5();

    updateTalentDisplay(playerId,testModePlayerGroup);
}

void summonDummy(){

    int last;
    int dps;
    int total;
    string unitTag;
    
    libNtve_gf_CreateUnitsWithDefaultFacing(1,"dbHero38",0,0,RegionRandomPoint(RegionCircle(PointFromName("test"), 5.5)));

    last = TextTagCreate(StringToText("上一次=0.00"),20,PointWithOffset(UnitGetPosition(UnitLastCreated()),0,10),1,true,true,testModePlayerGroup);
    dps = TextTagCreate(StringToText("DPS=0.00"),20,PointWithOffset(UnitGetPosition(UnitLastCreated()),0,10),1,true,true,testModePlayerGroup);
    total = TextTagCreate(StringToText("总伤害=0.00"),20,PointWithOffset(UnitGetPosition(UnitLastCreated()),0,10),1,true,true,testModePlayerGroup);

    TextTagAttachToUnit(last,UnitLastCreated(),3);
    TextTagAttachToUnit(dps,UnitLastCreated(),2);
    TextTagAttachToUnit(total,UnitLastCreated(),1);

    unitTag = IntToString(UnitGetTag(UnitLastCreated()));

    DataTableSetInt(true,damageDisplayerKey(unitTag,c_damagedisplayer_texttagLast),last);
    DataTableSetInt(true,damageDisplayerKey(unitTag,c_damagedisplayer_texttagDps),dps);
    DataTableSetInt(true,damageDisplayerKey(unitTag,c_damagedisplayer_texttagTotal),total);

    UnitSetPropertyInt(UnitLastCreated(),c_unitPropLifeMax,10000);
    UnitSetPropertyInt(UnitLastCreated(),c_unitPropLifeRegen,2000);
    UnitSetPropertyInt(UnitLastCreated(),c_unitPropLifeArmor,0);
    UnitSetPropertyInt(UnitLastCreated(),c_unitPropEnergyArmor,0);
    
    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("stop", 0)), c_orderQueueAddToFront);
    
    
}

